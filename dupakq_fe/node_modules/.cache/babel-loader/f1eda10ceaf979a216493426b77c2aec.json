{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar result_summary_1 = __importDefault(require(\"./result-summary\"));\nvar internal_1 = require(\"./internal\");\nvar EMPTY_CONNECTION_HOLDER = internal_1.connectionHolder.EMPTY_CONNECTION_HOLDER;\n/**\n * @private\n * @param {Error} error The error\n * @returns {void}\n */\nvar DEFAULT_ON_ERROR = function DEFAULT_ON_ERROR(error) {\n  console.log('Uncaught error when processing result: ' + error);\n};\n/**\n * @private\n * @param {ResultSummary} summary\n * @returns {void}\n */\nvar DEFAULT_ON_COMPLETED = function DEFAULT_ON_COMPLETED(summary) {};\n/**\n * A stream of {@link Record} representing the result of a query.\n * Can be consumed eagerly as {@link Promise} resolved with array of records and {@link ResultSummary}\n * summary, or rejected with error that contains {@link string} code and {@link string} message.\n * Alternatively can be consumed lazily using {@link Result#subscribe} function.\n * @access public\n */\nvar Result = /** @class */function () {\n  /**\n   * Inject the observer to be used.\n   * @constructor\n   * @access private\n   * @param {Promise<observer.ResultStreamObserver>} streamObserverPromise\n   * @param {mixed} query - Cypher query to execute\n   * @param {Object} parameters - Map with parameters to use in query\n   * @param {ConnectionHolder} connectionHolder - to be notified when result is either fully consumed or error happened.\n   */\n  function Result(streamObserverPromise, query, parameters, connectionHolder) {\n    this._stack = captureStacktrace();\n    this._streamObserverPromise = streamObserverPromise;\n    this._p = null;\n    this._query = query;\n    this._parameters = parameters || {};\n    this._connectionHolder = connectionHolder || EMPTY_CONNECTION_HOLDER;\n  }\n  /**\n   * Returns a promise for the field keys.\n   *\n   * *Should not be combined with {@link Result#subscribe} function.*\n   *\n   * @public\n   * @returns {Promise<string[]>} - Field keys, in the order they will appear in records.\n   }\n   */\n  Result.prototype.keys = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this._streamObserverPromise.then(function (observer) {\n        return observer.subscribe({\n          onKeys: function onKeys(keys) {\n            return resolve(keys);\n          },\n          onError: function onError(err) {\n            return reject(err);\n          }\n        });\n      }).catch(reject);\n    });\n  };\n  /**\n   * Returns a promise for the result summary.\n   *\n   * *Should not be combined with {@link Result#subscribe} function.*\n   *\n   * @public\n   * @returns {Promise<ResultSummary>} - Result summary.\n   *\n   */\n  Result.prototype.summary = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this._streamObserverPromise.then(function (o) {\n        o.cancel();\n        o.subscribe({\n          onCompleted: function onCompleted(metadata) {\n            return _this._createSummary(metadata).then(resolve, reject);\n          },\n          onError: function onError(err) {\n            return reject(err);\n          }\n        });\n      }).catch(reject);\n    });\n  };\n  /**\n   * Create and return new Promise\n   *\n   * @private\n   * @return {Promise} new Promise.\n   */\n  Result.prototype._getOrCreatePromise = function () {\n    var _this = this;\n    if (!this._p) {\n      this._p = new Promise(function (resolve, reject) {\n        var records = [];\n        var observer = {\n          onNext: function onNext(record) {\n            records.push(record);\n          },\n          onCompleted: function onCompleted(summary) {\n            resolve({\n              records: records,\n              summary: summary\n            });\n          },\n          onError: function onError(error) {\n            reject(error);\n          }\n        };\n        _this.subscribe(observer);\n      });\n    }\n    return this._p;\n  };\n  /**\n   * Waits for all results and calls the passed in function with the results.\n   *\n   * *Should not be combined with {@link Result#subscribe} function.*\n   *\n   * @param {function(result: {records:Array<Record>, summary: ResultSummary})} onFulfilled - function to be called\n   * when finished.\n   * @param {function(error: {message:string, code:string})} onRejected - function to be called upon errors.\n   * @return {Promise} promise.\n   */\n  Result.prototype.then = function (onFulfilled, onRejected) {\n    return this._getOrCreatePromise().then(onFulfilled, onRejected);\n  };\n  /**\n   * Catch errors when using promises.\n   *\n   * *Should not be combined with {@link Result#subscribe} function.*\n   *\n   * @param {function(error: Neo4jError)} onRejected - Function to be called upon errors.\n   * @return {Promise} promise.\n   */\n  Result.prototype.catch = function (onRejected) {\n    return this._getOrCreatePromise().catch(onRejected);\n  };\n  Result.prototype.finally = function (onfinally) {\n    return this._getOrCreatePromise().finally(onfinally);\n  };\n  /**\n   * Stream records to observer as they come in, this is a more efficient method\n   * of handling the results, and allows you to handle arbitrarily large results.\n   *\n   * @param {Object} observer - Observer object\n   * @param {function(keys: string[])} observer.onKeys - handle stream head, the field keys.\n   * @param {function(record: Record)} observer.onNext - handle records, one by one.\n   * @param {function(summary: ResultSummary)} observer.onCompleted - handle stream tail, the result summary.\n   * @param {function(error: {message:string, code:string})} observer.onError - handle errors.\n   * @return {void}\n   */\n  Result.prototype.subscribe = function (observer) {\n    var _this = this;\n    var onCompletedOriginal = observer.onCompleted || DEFAULT_ON_COMPLETED;\n    var onCompletedWrapper = function onCompletedWrapper(metadata) {\n      _this._createSummary(metadata).then(function (summary) {\n        return onCompletedOriginal.call(observer, summary);\n      });\n    };\n    observer.onCompleted = onCompletedWrapper;\n    var onErrorOriginal = observer.onError || DEFAULT_ON_ERROR;\n    var onErrorWrapper = function onErrorWrapper(error) {\n      // notify connection holder that the used connection is not needed any more because error happened\n      // and result can't bee consumed any further; call the original onError callback after that\n      _this._connectionHolder.releaseConnection().then(function () {\n        replaceStacktrace(error, _this._stack);\n        onErrorOriginal.call(observer, error);\n      });\n    };\n    observer.onError = onErrorWrapper;\n    this._streamObserverPromise.then(function (o) {\n      return o.subscribe(observer);\n    }).catch(function (error) {\n      return observer.onError(error);\n    });\n  };\n  /**\n   * Signals the stream observer that the future records should be discarded on the server.\n   *\n   * @protected\n   * @since 4.0.0\n   * @returns {void}\n   */\n  Result.prototype._cancel = function () {\n    this._streamObserverPromise.then(function (o) {\n      return o.cancel();\n    });\n  };\n  Result.prototype._createSummary = function (metadata) {\n    var _a = internal_1.util.validateQueryAndParameters(this._query, this._parameters, {\n        skipAsserts: true\n      }),\n      query = _a.validatedQuery,\n      parameters = _a.params;\n    var connectionHolder = this._connectionHolder;\n    return connectionHolder.getConnection().then(\n    // onFulfilled:\n    function (connection) {\n      return connectionHolder.releaseConnection().then(function () {\n        return connection ? connection.protocol().version : undefined;\n      });\n    },\n    // onRejected:\n    function (_) {\n      return undefined;\n    }).then(function (protocolVersion) {\n      return new result_summary_1.default(query, parameters, metadata, protocolVersion);\n    });\n  };\n  return Result;\n}();\nSymbol.toStringTag;\nfunction captureStacktrace() {\n  var error = new Error('');\n  if (error.stack) {\n    return error.stack.replace(/^Error(\\n\\r)*/, ''); // we don't need the 'Error\\n' part, if only it exists\n  }\n\n  return null;\n}\n/**\n * @private\n * @param {Error} error The error\n * @param {string| null} newStack The newStack\n * @returns {void}\n */\nfunction replaceStacktrace(error, newStack) {\n  if (newStack) {\n    // Error.prototype.toString() concatenates error.name and error.message nicely\n    // then we add the rest of the stack trace\n    error.stack = error.toString() + '\\n' + newStack;\n  }\n}\nexports.default = Result;","map":null,"metadata":{},"sourceType":"script"}