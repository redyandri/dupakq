{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.epochSecondAndNanoToLocalDateTime = exports.nanoOfDayToLocalTime = exports.epochDayToDate = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.temporalUtil,\n  DAYS_0000_TO_1970 = _a.DAYS_0000_TO_1970,\n  DAYS_PER_400_YEAR_CYCLE = _a.DAYS_PER_400_YEAR_CYCLE,\n  NANOS_PER_HOUR = _a.NANOS_PER_HOUR,\n  NANOS_PER_MINUTE = _a.NANOS_PER_MINUTE,\n  NANOS_PER_SECOND = _a.NANOS_PER_SECOND,\n  SECONDS_PER_DAY = _a.SECONDS_PER_DAY,\n  floorDiv = _a.floorDiv,\n  floorMod = _a.floorMod;\n/**\n * Converts given epoch day to a local date.\n * @param {Integer|number|string} epochDay the epoch day to convert.\n * @return {Date} the date representing the epoch day in years, months and days.\n */\nfunction epochDayToDate(epochDay) {\n  epochDay = (0, neo4j_driver_core_1.int)(epochDay);\n  var zeroDay = epochDay.add(DAYS_0000_TO_1970).subtract(60);\n  var adjust = (0, neo4j_driver_core_1.int)(0);\n  if (zeroDay.lessThan(0)) {\n    var adjustCycles = zeroDay.add(1).div(DAYS_PER_400_YEAR_CYCLE).subtract(1);\n    adjust = adjustCycles.multiply(400);\n    zeroDay = zeroDay.add(adjustCycles.multiply(-DAYS_PER_400_YEAR_CYCLE));\n  }\n  var year = zeroDay.multiply(400).add(591).div(DAYS_PER_400_YEAR_CYCLE);\n  var dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));\n  if (dayOfYearEst.lessThan(0)) {\n    year = year.subtract(1);\n    dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));\n  }\n  year = year.add(adjust);\n  var marchDayOfYear = dayOfYearEst;\n  var marchMonth = marchDayOfYear.multiply(5).add(2).div(153);\n  var month = marchMonth.add(2).modulo(12).add(1);\n  var day = marchDayOfYear.subtract(marchMonth.multiply(306).add(5).div(10)).add(1);\n  year = year.add(marchMonth.div(10));\n  return new neo4j_driver_core_1.Date(year, month, day);\n}\nexports.epochDayToDate = epochDayToDate;\n/**\n * Converts nanoseconds of the day into local time.\n * @param {Integer|number|string} nanoOfDay the nanoseconds of the day to convert.\n * @return {LocalTime} the local time representing given nanoseconds of the day.\n */\nfunction nanoOfDayToLocalTime(nanoOfDay) {\n  nanoOfDay = (0, neo4j_driver_core_1.int)(nanoOfDay);\n  var hour = nanoOfDay.div(NANOS_PER_HOUR);\n  nanoOfDay = nanoOfDay.subtract(hour.multiply(NANOS_PER_HOUR));\n  var minute = nanoOfDay.div(NANOS_PER_MINUTE);\n  nanoOfDay = nanoOfDay.subtract(minute.multiply(NANOS_PER_MINUTE));\n  var second = nanoOfDay.div(NANOS_PER_SECOND);\n  var nanosecond = nanoOfDay.subtract(second.multiply(NANOS_PER_SECOND));\n  return new neo4j_driver_core_1.LocalTime(hour, minute, second, nanosecond);\n}\nexports.nanoOfDayToLocalTime = nanoOfDayToLocalTime;\n/**\n * Converts given epoch second and nanosecond adjustment into a local date time object.\n * @param {Integer|number|string} epochSecond the epoch second to use.\n * @param {Integer|number|string} nano the nanosecond to use.\n * @return {LocalDateTime} the local date time representing given epoch second and nano.\n */\nfunction epochSecondAndNanoToLocalDateTime(epochSecond, nano) {\n  var epochDay = floorDiv(epochSecond, SECONDS_PER_DAY);\n  var secondsOfDay = floorMod(epochSecond, SECONDS_PER_DAY);\n  var nanoOfDay = secondsOfDay.multiply(NANOS_PER_SECOND).add(nano);\n  var localDate = epochDayToDate(epochDay);\n  var localTime = nanoOfDayToLocalTime(nanoOfDay);\n  return new neo4j_driver_core_1.LocalDateTime(localDate.year, localDate.month, localDate.day, localTime.hour, localTime.minute, localTime.second, localTime.nanosecond);\n}\nexports.epochSecondAndNanoToLocalDateTime = epochSecondAndNanoToLocalDateTime;","map":null,"metadata":{},"sourceType":"script"}