{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ENCRYPTION_OFF = exports.ENCRYPTION_ON = exports.validateQueryAndParameters = exports.assertValidDate = exports.assertNumberOrInteger = exports.assertNumber = exports.assertString = exports.assertObject = exports.isString = exports.isObject = exports.isEmptyObjectOrNull = void 0;\nvar integer_1 = require(\"../integer\");\nvar json_1 = require(\"../json\");\nvar ENCRYPTION_ON = 'ENCRYPTION_ON';\nexports.ENCRYPTION_ON = ENCRYPTION_ON;\nvar ENCRYPTION_OFF = 'ENCRYPTION_OFF';\nexports.ENCRYPTION_OFF = ENCRYPTION_OFF;\n/**\n * Verifies if the object is null or empty\n * @param obj The subject object\n * @returns {boolean} True if it's empty object or null\n */\nfunction isEmptyObjectOrNull(obj) {\n  if (obj === null) {\n    return true;\n  }\n  if (!isObject(obj)) {\n    return false;\n  }\n  for (var prop in obj) {\n    if (Object.prototype.hasOwnProperty.bind(obj, prop)) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.isEmptyObjectOrNull = isEmptyObjectOrNull;\n/**\n * Verify if it's an object\n * @param obj The subject\n * @returns {boolean} True if it's an object\n */\nfunction isObject(obj) {\n  return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;\n}\nexports.isObject = isObject;\n/**\n * Check and normalize given query and parameters.\n * @param {string|{text: string, parameters: Object}} query the query to check.\n * @param {Object} parameters\n * @return {{validatedQuery: string|{text: string, parameters: Object}, params: Object}} the normalized query with parameters.\n * @throws TypeError when either given query or parameters are invalid.\n */\nfunction validateQueryAndParameters(query, parameters, opt) {\n  var validatedQuery = '';\n  var params = parameters || {};\n  var skipAsserts = (opt === null || opt === void 0 ? void 0 : opt.skipAsserts) || false;\n  if (typeof query === 'string') {\n    validatedQuery = query;\n  } else if (query instanceof String) {\n    validatedQuery = query.toString();\n  } else if (typeof query === 'object' && query.text) {\n    validatedQuery = query.text;\n    params = query.parameters || {};\n  }\n  if (!skipAsserts) {\n    assertCypherQuery(validatedQuery);\n    assertQueryParameters(params);\n  }\n  return {\n    validatedQuery: validatedQuery,\n    params: params\n  };\n}\nexports.validateQueryAndParameters = validateQueryAndParameters;\n/**\n * Assert it's a object\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {object} The subject object\n * @throws {TypeError} when the supplied param is not an object\n */\nfunction assertObject(obj, objName) {\n  if (!isObject(obj)) {\n    throw new TypeError(objName + ' expected to be an object but was: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertObject = assertObject;\n/**\n * Assert it's a string\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {string} The subject string\n * @throws {TypeError} when the supplied param is not a string\n */\nfunction assertString(obj, objName) {\n  if (!isString(obj)) {\n    throw new TypeError(objName + ' expected to be string but was: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertString = assertString;\n/**\n * Assert it's a number\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {number} The number\n * @throws {TypeError} when the supplied param is not a number\n */\nfunction assertNumber(obj, objName) {\n  if (typeof obj !== 'number') {\n    throw new TypeError(objName + ' expected to be a number but was: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertNumber = assertNumber;\n/**\n * Assert it's a number or integer\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {number|Integer} The subject object\n * @throws {TypeError} when the supplied param is not a number or integer\n */\nfunction assertNumberOrInteger(obj, objName) {\n  if (typeof obj !== 'number' && typeof obj !== 'bigint' && !(0, integer_1.isInt)(obj)) {\n    throw new TypeError(objName + ' expected to be either a number or an Integer object but was: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertNumberOrInteger = assertNumberOrInteger;\n/**\n * Assert it's a valid datae\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {Date} The valida date\n * @throws {TypeError} when the supplied param is not a valid date\n */\nfunction assertValidDate(obj, objName) {\n  if (Object.prototype.toString.call(obj) !== '[object Date]') {\n    throw new TypeError(objName + ' expected to be a standard JavaScript Date but was: ' + (0, json_1.stringify)(obj));\n  }\n  if (Number.isNaN(obj.getTime())) {\n    throw new TypeError(objName + ' expected to be valid JavaScript Date but its time was NaN: ' + (0, json_1.stringify)(obj));\n  }\n  return obj;\n}\nexports.assertValidDate = assertValidDate;\n/**\n * Validates a cypher query string\n * @param {any} obj The query\n * @returns {void}\n * @throws {TypeError} if the query is not valid\n */\nfunction assertCypherQuery(obj) {\n  assertString(obj, 'Cypher query');\n  if (obj.trim().length === 0) {\n    throw new TypeError('Cypher query is expected to be a non-empty string.');\n  }\n}\n/**\n * Validates if the query parameters is an object\n * @param {any} obj The parameters\n * @returns {void}\n * @throws {TypeError} if the parameters is not valid\n */\nfunction assertQueryParameters(obj) {\n  if (!isObject(obj)) {\n    // objects created with `Object.create(null)` do not have a constructor property\n    var constructor = obj.constructor ? ' ' + obj.constructor.name : '';\n    throw new TypeError(\"Query parameters are expected to either be undefined/null or an object, given:\" + constructor + \" \" + obj);\n  }\n}\n/**\n * Verify if the supplied object is a string\n *\n * @param str The string\n * @returns {boolean} True if the supplied object is an string\n */\nfunction isString(str) {\n  return Object.prototype.toString.call(str) === '[object String]';\n}\nexports.isString = isString;","map":null,"metadata":{},"sourceType":"script"}