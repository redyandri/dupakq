{"ast":null,"code":"import _slicedToArray from \"/Users/anandri/PycharmProjects/dupakq/dupakq_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anandri/PycharmProjects/dupakq/dupakq_fe/src/RGV.js\";\nimport Graph from 'react-vis-network-graph';\nimport React, { useState, memo } from \"react\";\nrequire('dotenv').config();\nvar API_URI = 'http://' + process.env.REACT_APP_API_HOST + ':' + process.env.REACT_APP_API_PORT;\nfunction RGV(_ref) {\n  var data = _ref.data;\n  console.log('graph data:', data);\n  // let tmp_graph={nodes:data.nodes,edges:data.edges}\n  // // setState((x)=>  {return {...x,graph:tmp_graph}});\n  var _useState = useState({\n      nodes: data.nodes,\n      edges: data.edges\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    graph = _useState2[0],\n    setGraph = _useState2[1];\n  var events = {\n    select: function select(_ref2) {\n      var nodes = _ref2.nodes,\n        edges = _ref2.edges;\n      console.log(\"Selected nodes:\" + nodes);\n      console.log(\"Selected edges:\" + edges);\n    },\n    selectEdge: function selectEdge(e) {\n      var nodes = e.nodes,\n        edges = e.edges;\n      if (edges.length >= 1) {\n        console.log('selectEdge:' + edges + '\\nNodes:' + nodes);\n      }\n    }\n  };\n\n  // const [state, setState] = useState({\n  // counter: 5,\n  // graph: {\n  //   nodes: data.nodes,\n  //   edges: data.edges\n  // },\n  // events: {\n  //   select: ({ nodes, edges }) => {\n  //     console.log(\"Selected nodes:\"+nodes);\n  //     console.log(\"Selected edges:\"+edges);\n  //   },\n  //   selectEdge:(e)=>{\n  //     var {nodes,edges}=e;\n  //     if (edges.length>=1){\n  //       console.log('selectEdge:'+edges+'\\nNodes:'+nodes);\n  //     }\n  //   }\n  // }\n  // })\n\n  // const { graph, events } = state;\n\n  var options = {\n    layout: {\n      hierarchical: false\n    },\n    edges: {\n      color: \"#000000\"\n    },\n    height: \"256px\"\n  };\n  return /*#__PURE__*/React.createElement(Graph, {\n    graph: graph,\n    options: options,\n    events: events,\n    style: {\n      height: \"250px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  });\n}\nexport default memo(RGV);","map":{"version":3,"names":["Graph","React","useState","memo","require","config","API_URI","process","env","REACT_APP_API_HOST","REACT_APP_API_PORT","RGV","data","console","log","nodes","edges","graph","setGraph","events","select","selectEdge","e","length","options","layout","hierarchical","color","height"],"sources":["/Users/anandri/PycharmProjects/dupakq/dupakq_fe/src/RGV.js"],"sourcesContent":["import Graph from 'react-vis-network-graph';\nimport React, { useState,memo } from \"react\";\nrequire('dotenv').config()\n\nconst API_URI = 'http://' + process.env.REACT_APP_API_HOST + ':' + process.env.REACT_APP_API_PORT\n \n\nfunction RGV({data}) {\n  \n  console.log('graph data:',data)\n  // let tmp_graph={nodes:data.nodes,edges:data.edges}\n  // // setState((x)=>  {return {...x,graph:tmp_graph}});\n  const [graph,setGraph]=useState(\n    {\n      nodes: data.nodes,\n      edges: data.edges\n    }\n  );\n\n  const events= {\n    select: ({ nodes, edges }) => {\n      console.log(\"Selected nodes:\"+nodes);\n      console.log(\"Selected edges:\"+edges);\n    },\n    selectEdge:(e)=>{\n      var {nodes,edges}=e;\n      if (edges.length>=1){\n        console.log('selectEdge:'+edges+'\\nNodes:'+nodes);\n      }\n    }\n  };\n\n  // const [state, setState] = useState({\n    // counter: 5,\n    // graph: {\n    //   nodes: data.nodes,\n    //   edges: data.edges\n    // },\n    // events: {\n    //   select: ({ nodes, edges }) => {\n    //     console.log(\"Selected nodes:\"+nodes);\n    //     console.log(\"Selected edges:\"+edges);\n    //   },\n    //   selectEdge:(e)=>{\n    //     var {nodes,edges}=e;\n    //     if (edges.length>=1){\n    //       console.log('selectEdge:'+edges+'\\nNodes:'+nodes);\n    //     }\n    //   }\n    // }\n  // })\n\n  // const { graph, events } = state;\n \n  const options = {\n    layout: {\n      hierarchical: false\n    },\n    edges: {\n      color: \"#000000\"\n    },\n    height: \"256px\"\n  };\n\n  \n \n  return (\n    <Graph \n    graph={graph} \n    options={options} \n    events={events} \n    style={{ height: \"250px\" }} \n    />\n  );\n}\n \nexport default memo(RGV);"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,yBAAyB;AAC3C,OAAOC,KAAK,IAAIC,QAAQ,EAACC,IAAI,QAAQ,OAAO;AAC5CC,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,EAAE;AAE1B,IAAMC,OAAO,GAAG,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,GAAG,GAAG,GAAGF,OAAO,CAACC,GAAG,CAACE,kBAAkB;AAGjG,SAASC,GAAG,OAAS;EAAA,IAAPC,IAAI,QAAJA,IAAI;EAEhBC,OAAO,CAACC,GAAG,CAAC,aAAa,EAACF,IAAI,CAAC;EAC/B;EACA;EAAA,gBACuBV,QAAQ,CAC7B;MACEa,KAAK,EAAEH,IAAI,CAACG,KAAK;MACjBC,KAAK,EAAEJ,IAAI,CAACI;IACd,CAAC,CACF;IAAA;IALMC,KAAK;IAACC,QAAQ;EAOrB,IAAMC,MAAM,GAAE;IACZC,MAAM,EAAE,uBAAsB;MAAA,IAAnBL,KAAK,SAALA,KAAK;QAAEC,KAAK,SAALA,KAAK;MACrBH,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAACC,KAAK,CAAC;MACpCF,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAACE,KAAK,CAAC;IACtC,CAAC;IACDK,UAAU,EAAC,oBAACC,CAAC,EAAG;MAAA,IACTP,KAAK,GAAQO,CAAC,CAAdP,KAAK;QAACC,KAAK,GAAEM,CAAC,CAARN,KAAK;MAChB,IAAIA,KAAK,CAACO,MAAM,IAAE,CAAC,EAAC;QAClBV,OAAO,CAACC,GAAG,CAAC,aAAa,GAACE,KAAK,GAAC,UAAU,GAACD,KAAK,CAAC;MACnD;IACF;EACF,CAAC;;EAED;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACF;;EAEA;;EAEA,IAAMS,OAAO,GAAG;IACdC,MAAM,EAAE;MACNC,YAAY,EAAE;IAChB,CAAC;IACDV,KAAK,EAAE;MACLW,KAAK,EAAE;IACT,CAAC;IACDC,MAAM,EAAE;EACV,CAAC;EAID,oBACE,oBAAC,KAAK;IACN,KAAK,EAAEX,KAAM;IACb,OAAO,EAAEO,OAAQ;IACjB,MAAM,EAAEL,MAAO;IACf,KAAK,EAAE;MAAES,MAAM,EAAE;IAAQ,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACzB;AAEN;AAEA,eAAezB,IAAI,CAACQ,GAAG,CAAC"},"metadata":{},"sourceType":"module"}