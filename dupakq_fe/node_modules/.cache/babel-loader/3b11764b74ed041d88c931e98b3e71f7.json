{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\nvar _rxjs = require(\"rxjs\");\nvar _operators = require(\"rxjs/operators\");\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar States = {\n  READY: 0,\n  STREAMING: 1,\n  COMPLETED: 2\n};\n/**\n * The reactive result interface.\n */\n\nvar RxResult = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @protected\n   * @param {Observable<Result>} result - An observable of single Result instance to relay requests.\n   */\n  function RxResult(result) {\n    (0, _classCallCheck2[\"default\"])(this, RxResult);\n    var replayedResult = result.pipe((0, _operators.publishReplay)(1), (0, _operators.refCount)());\n    this._result = replayedResult;\n    this._keys = replayedResult.pipe((0, _operators.flatMap)(function (r) {\n      return (0, _rxjs.from)(r.keys());\n    }), (0, _operators.publishReplay)(1), (0, _operators.refCount)());\n    this._records = new _rxjs.Subject();\n    this._summary = new _rxjs.ReplaySubject();\n    this._state = States.READY;\n  }\n  /**\n   * Returns an observable that exposes a single item containing field names\n   * returned by the executing query.\n   *\n   * Errors raised by actual query execution can surface on the returned\n   * observable stream.\n   *\n   * @public\n   * @returns {Observable<string[]>} - An observable stream (with exactly one element) of field names.\n   */\n\n  (0, _createClass2[\"default\"])(RxResult, [{\n    key: \"keys\",\n    value: function keys() {\n      return this._keys;\n    }\n    /**\n     * Returns an observable that exposes each record returned by the executing query.\n     *\n     * Errors raised during the streaming phase can surface on the returned observable stream.\n     *\n     * @public\n     * @returns {Observable<Record>} - An observable stream of records.\n     */\n  }, {\n    key: \"records\",\n    value: function records() {\n      var _this = this;\n      return this._result.pipe((0, _operators.flatMap)(function (result) {\n        return new _rxjs.Observable(function (recordsObserver) {\n          return _this._startStreaming({\n            result: result,\n            recordsObserver: recordsObserver\n          });\n        });\n      }));\n    }\n    /**\n     * Returns an observable that exposes a single item of {@link ResultSummary} that is generated by\n     * the server after the streaming of the executing query is completed.\n     *\n     * *Subscribing to this stream before subscribing to records() stream causes the results to be discarded on the server.*\n     *\n     * @public\n     * @returns {Observable<ResultSummary>} - An observable stream (with exactly one element) of result summary.\n     */\n  }, {\n    key: \"consume\",\n    value: function consume() {\n      var _this2 = this;\n      return this._result.pipe((0, _operators.flatMap)(function (result) {\n        return new _rxjs.Observable(function (summaryObserver) {\n          return _this2._startStreaming({\n            result: result,\n            summaryObserver: summaryObserver\n          });\n        });\n      }));\n    }\n  }, {\n    key: \"_startStreaming\",\n    value: function _startStreaming() {\n      var _this3 = this;\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        result = _ref.result,\n        _ref$recordsObserver = _ref.recordsObserver,\n        recordsObserver = _ref$recordsObserver === void 0 ? null : _ref$recordsObserver,\n        _ref$summaryObserver = _ref.summaryObserver,\n        summaryObserver = _ref$summaryObserver === void 0 ? null : _ref$summaryObserver;\n      var subscriptions = [];\n      if (summaryObserver) {\n        subscriptions.push(this._summary.subscribe(summaryObserver));\n      }\n      if (this._state < States.STREAMING) {\n        this._state = States.STREAMING;\n        if (recordsObserver) {\n          subscriptions.push(this._records.subscribe(recordsObserver));\n        }\n        subscriptions.push({\n          unsubscribe: function unsubscribe() {\n            if (result._cancel) {\n              result._cancel();\n            }\n          }\n        });\n        if (this._records.observers.length === 0) {\n          result._cancel();\n        }\n        result.subscribe({\n          onNext: function onNext(record) {\n            _this3._records.next(record);\n          },\n          onCompleted: function onCompleted(summary) {\n            _this3._records.complete();\n            _this3._summary.next(summary);\n            _this3._summary.complete();\n            _this3._state = States.COMPLETED;\n          },\n          onError: function onError(err) {\n            _this3._records.error(err);\n            _this3._summary.error(err);\n            _this3._state = States.COMPLETED;\n          }\n        });\n      } else if (recordsObserver) {\n        recordsObserver.error((0, _neo4jDriverCore.newError)('Streaming has already started/consumed with a previous records or summary subscription.'));\n      }\n      return function () {\n        subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      };\n    }\n  }]);\n  return RxResult;\n}();\nexports[\"default\"] = RxResult;","map":null,"metadata":{},"sourceType":"script"}