{"ast":null,"code":"import _slicedToArray from \"/Users/anandri/PycharmProjects/dupakq/dupakq_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anandri/PycharmProjects/dupakq/dupakq_fe/src/RGV.js\";\n// import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import Graph from \"react-graph-vis\";\nimport Graph from 'react-vis-network-graph';\nimport React, { useState } from \"react\";\nfunction RGV() {\n  // const graph = {\n  //   nodes: [\n  //     { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n  //     { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n  //     { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n  //     { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n  //     { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n  //   ],\n  //   edges: [\n  //     { from: 1, to: 2,label:'12' },\n  //     { from: 1, to: 3,label:'12' },\n  //     { from: 2, to: 4,label:'12' },\n  //     { from: 2, to: 5,label:'12' }\n  //   ]\n  // };\n  var _useState = useState({\n      counter: 5,\n      graph: {\n        nodes: [{\n          id: 1,\n          label: \"Node 1\",\n          color: \"#e04141\"\n        }, {\n          id: 2,\n          label: \"Node 2\",\n          color: \"#e09c41\"\n        }, {\n          id: 3,\n          label: \"Node 3\",\n          color: \"#e0df41\"\n        }, {\n          id: 4,\n          label: \"Node 4\",\n          color: \"#7be041\"\n        }, {\n          id: 5,\n          label: \"Node 5\",\n          color: \"#41e0c9\"\n        }],\n        edges: [{\n          id: 12,\n          from: 1,\n          to: 2,\n          label: '12'\n        }, {\n          id: 13,\n          from: 1,\n          to: 3,\n          label: '13'\n        }, {\n          id: 24,\n          from: 2,\n          to: 4,\n          label: '24'\n        }, {\n          id: 25,\n          from: 2,\n          to: 5,\n          label: '25'\n        }]\n      },\n      events: {\n        select: function select(_ref) {\n          var nodes = _ref.nodes,\n            edges = _ref.edges;\n          console.log(\"Selected nodes:\" + nodes);\n          console.log(\"Selected edges:\" + edges);\n        },\n        selectEdge: function selectEdge(e) {\n          var nodes = e.nodes,\n            edges = e.edges;\n          if (edges.length >= 1) {\n            console.log('selectEdge:' + edges + '\\nNodes:' + nodes);\n          }\n        }\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var graph = state.graph,\n    events = state.events;\n  var options = {\n    layout: {\n      hierarchical: true\n    },\n    edges: {\n      color: \"#000000\"\n    },\n    height: \"500px\"\n  };\n\n  // const events = {\n  //   select: function(event) {\n  //     var { nodes, edges } = event;\n  //   }\n  // };\n  return (\n    /*#__PURE__*/\n    // <Graph\n    //   graph={graph}\n    //   options={options}\n    //   events={events}\n    //   getNetwork={network => {\n    //     //  if you want access to vis.js network api you can set the state in a parent component using this property\n    //   }}\n    // />\n    React.createElement(Graph, {\n      graph: graph,\n      options: options,\n      events: events,\n      style: {\n        height: \"640px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }\n    })\n  );\n}\nexport default RGV;\n\n// // import Graph from \"react-graph-vis\";\n// import Graph from 'react-vis-network-graph';\n// import React, { useState } from \"react\";\n// import ReactDOM from \"react-dom\";\n\n// const options = {\n//   layout: {\n//     hierarchical: false\n//   },\n//   edges: {\n//     color: \"#000000\"\n//   }\n// };\n\n// function randomColor() {\n//   const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n//   const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n//   const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n//   return `#${red}${green}${blue}`;\n// }\n\n// const myApp = () => {\n//   const createNode = (x, y) => {\n//     const color = randomColor();\n//     setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n//       const id = counter + 1;\n//       const from = Math.floor(Math.random() * (counter - 1)) + 1;\n//       return {\n//         graph: {\n//           nodes: [\n//             ...nodes,\n//             { id, label: `Node ${id}`, color, x, y }\n//           ],\n//           edges: [\n//             ...edges,\n//             { from, to: id }\n//           ]\n//         },\n//         counter: id,\n//         ...rest\n//       }\n//     });\n//   }\n//   const [state, setState] = useState({\n//     counter: 5,\n//     graph: {\n//       nodes: [\n//         { id: 1, label: \"Node 1\", color: \"#e04141\" },\n//         { id: 2, label: \"Node 2\", color: \"#e09c41\" },\n//         { id: 3, label: \"Node 3\", color: \"#e0df41\" },\n//         { id: 4, label: \"Node 4\", color: \"#7be041\" },\n//         { id: 5, label: \"Node 5\", color: \"#41e0c9\" }\n//       ],\n//       edges: [\n//         { from: 1, to: 2 },\n//         { from: 1, to: 3 },\n//         { from: 2, to: 4 },\n//         { from: 2, to: 5 }\n//       ]\n//     },\n//     events: {\n//       select: ({ nodes, edges }) => {\n//         console.log(\"Selected nodes:\");\n//         console.log(nodes);\n//         console.log(\"Selected edges:\");\n//         console.log(edges);\n//         alert(\"Selected node: \" + nodes);\n//       },\n//       doubleClick: ({ pointer: { canvas } }) => {\n//         createNode(canvas.x, canvas.y);\n//       }\n//     }\n//   })\n//   const { graph, events } = state;\n//   return (\n//     <div>\n//       <h1>React graph vis</h1>\n//       <p>\n//         <a href=\"https://github.com/crubier/react-graph-vis\">Github</a> -{\" \"}\n//         <a href=\"https://www.npmjs.com/package/react-graph-vis\">NPM</a>\n//       </p>\n//       <p><a href=\"https://github.com/crubier/react-graph-vis/tree/master/example/src/index.js\">Source of this page</a></p>\n//       <p>A React component to display beautiful network graphs using vis.js</p>\n//       <p>Make sure to visit <a href=\"http://visjs.org\">visjs.org</a> for more info.</p>\n//       <p>This package allows to render network graphs using vis.js.</p>\n//       <p>Rendered graphs are scrollable, zoomable, retina ready, dynamic</p>\n//       <p>In this example, we manage state with react: on double click we create a new node, and on select we display an alert.</p>\n//       <Graph graph={graph} options={options} events={events} style={{ height: \"640px\" }} />\n//     </div>\n//   );\n\n// }\n\n// export default myApp;","map":{"version":3,"names":["ReactDOM","Graph","React","useState","RGV","counter","graph","nodes","id","label","color","edges","from","to","events","select","console","log","selectEdge","e","length","state","setState","options","layout","hierarchical","height"],"sources":["/Users/anandri/PycharmProjects/dupakq/dupakq_fe/src/RGV.js"],"sourcesContent":["// import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import Graph from \"react-graph-vis\";\nimport Graph from 'react-vis-network-graph';\nimport React, { useState } from \"react\";\n\n \nfunction RGV() {\n  // const graph = {\n  //   nodes: [\n  //     { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n  //     { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n  //     { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n  //     { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n  //     { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n  //   ],\n  //   edges: [\n  //     { from: 1, to: 2,label:'12' },\n  //     { from: 1, to: 3,label:'12' },\n  //     { from: 2, to: 4,label:'12' },\n  //     { from: 2, to: 5,label:'12' }\n  //   ]\n  // };\n  const [state, setState] = useState({\n    counter: 5,\n    graph: {\n      nodes: [\n        { id: 1, label: \"Node 1\", color: \"#e04141\" },\n        { id: 2, label: \"Node 2\", color: \"#e09c41\" },\n        { id: 3, label: \"Node 3\", color: \"#e0df41\" },\n        { id: 4, label: \"Node 4\", color: \"#7be041\" },\n        { id: 5, label: \"Node 5\", color: \"#41e0c9\" }\n      ],\n      edges: [\n        { id:12,from: 1, to: 2 ,label:'12'},\n        { id:13,from: 1, to: 3 ,label:'13'},\n        { id:24,from: 2, to: 4 ,label:'24'},\n        { id:25,from: 2, to: 5,label:'25' }\n      ]\n    },\n    events: {\n      select: ({ nodes, edges }) => {\n        console.log(\"Selected nodes:\"+nodes);\n        console.log(\"Selected edges:\"+edges);\n      },\n      selectEdge:(e)=>{\n        var {nodes,edges}=e;\n        if (edges.length>=1){\n          console.log('selectEdge:'+edges+'\\nNodes:'+nodes);\n        }\n      }\n    }\n  })\n  const { graph, events } = state;\n \n  const options = {\n    layout: {\n      hierarchical: true\n    },\n    edges: {\n      color: \"#000000\"\n    },\n    height: \"500px\"\n  };\n \n  // const events = {\n  //   select: function(event) {\n  //     var { nodes, edges } = event;\n  //   }\n  // };\n  return (\n    // <Graph\n    //   graph={graph}\n    //   options={options}\n    //   events={events}\n    //   getNetwork={network => {\n    //     //  if you want access to vis.js network api you can set the state in a parent component using this property\n    //   }}\n    // />\n    <Graph graph={graph} options={options} events={events} style={{ height: \"640px\" }} />\n  );\n}\n \nexport default RGV;\n\n\n// // import Graph from \"react-graph-vis\";\n// import Graph from 'react-vis-network-graph';\n// import React, { useState } from \"react\";\n// import ReactDOM from \"react-dom\";\n\n// const options = {\n//   layout: {\n//     hierarchical: false\n//   },\n//   edges: {\n//     color: \"#000000\"\n//   }\n// };\n\n// function randomColor() {\n//   const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n//   const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n//   const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n//   return `#${red}${green}${blue}`;\n// }\n\n// const myApp = () => {\n//   const createNode = (x, y) => {\n//     const color = randomColor();\n//     setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n//       const id = counter + 1;\n//       const from = Math.floor(Math.random() * (counter - 1)) + 1;\n//       return {\n//         graph: {\n//           nodes: [\n//             ...nodes,\n//             { id, label: `Node ${id}`, color, x, y }\n//           ],\n//           edges: [\n//             ...edges,\n//             { from, to: id }\n//           ]\n//         },\n//         counter: id,\n//         ...rest\n//       }\n//     });\n//   }\n//   const [state, setState] = useState({\n//     counter: 5,\n//     graph: {\n//       nodes: [\n//         { id: 1, label: \"Node 1\", color: \"#e04141\" },\n//         { id: 2, label: \"Node 2\", color: \"#e09c41\" },\n//         { id: 3, label: \"Node 3\", color: \"#e0df41\" },\n//         { id: 4, label: \"Node 4\", color: \"#7be041\" },\n//         { id: 5, label: \"Node 5\", color: \"#41e0c9\" }\n//       ],\n//       edges: [\n//         { from: 1, to: 2 },\n//         { from: 1, to: 3 },\n//         { from: 2, to: 4 },\n//         { from: 2, to: 5 }\n//       ]\n//     },\n//     events: {\n//       select: ({ nodes, edges }) => {\n//         console.log(\"Selected nodes:\");\n//         console.log(nodes);\n//         console.log(\"Selected edges:\");\n//         console.log(edges);\n//         alert(\"Selected node: \" + nodes);\n//       },\n//       doubleClick: ({ pointer: { canvas } }) => {\n//         createNode(canvas.x, canvas.y);\n//       }\n//     }\n//   })\n//   const { graph, events } = state;\n//   return (\n//     <div>\n//       <h1>React graph vis</h1>\n//       <p>\n//         <a href=\"https://github.com/crubier/react-graph-vis\">Github</a> -{\" \"}\n//         <a href=\"https://www.npmjs.com/package/react-graph-vis\">NPM</a>\n//       </p>\n//       <p><a href=\"https://github.com/crubier/react-graph-vis/tree/master/example/src/index.js\">Source of this page</a></p>\n//       <p>A React component to display beautiful network graphs using vis.js</p>\n//       <p>Make sure to visit <a href=\"http://visjs.org\">visjs.org</a> for more info.</p>\n//       <p>This package allows to render network graphs using vis.js.</p>\n//       <p>Rendered graphs are scrollable, zoomable, retina ready, dynamic</p>\n//       <p>In this example, we manage state with react: on double click we create a new node, and on select we display an alert.</p>\n//       <Graph graph={graph} options={options} events={events} style={{ height: \"640px\" }} />\n//     </div>\n//   );\n\n// }\n\n// export default myApp;"],"mappings":";;AAAA;AACA,OAAOA,QAAQ,MAAM,WAAW;AAChC;AACA,OAAOC,KAAK,MAAM,yBAAyB;AAC3C,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAGvC,SAASC,GAAG,GAAG;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA,gBAC0BD,QAAQ,CAAC;MACjCE,OAAO,EAAE,CAAC;MACVC,KAAK,EAAE;QACLC,KAAK,EAAE,CACL;UAAEC,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAU,CAAC,EAC5C;UAAEF,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAU,CAAC,EAC5C;UAAEF,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAU,CAAC,EAC5C;UAAEF,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAU,CAAC,EAC5C;UAAEF,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAU,CAAC,CAC7C;QACDC,KAAK,EAAE,CACL;UAAEH,EAAE,EAAC,EAAE;UAACI,IAAI,EAAE,CAAC;UAAEC,EAAE,EAAE,CAAC;UAAEJ,KAAK,EAAC;QAAI,CAAC,EACnC;UAAED,EAAE,EAAC,EAAE;UAACI,IAAI,EAAE,CAAC;UAAEC,EAAE,EAAE,CAAC;UAAEJ,KAAK,EAAC;QAAI,CAAC,EACnC;UAAED,EAAE,EAAC,EAAE;UAACI,IAAI,EAAE,CAAC;UAAEC,EAAE,EAAE,CAAC;UAAEJ,KAAK,EAAC;QAAI,CAAC,EACnC;UAAED,EAAE,EAAC,EAAE;UAACI,IAAI,EAAE,CAAC;UAAEC,EAAE,EAAE,CAAC;UAACJ,KAAK,EAAC;QAAK,CAAC;MAEvC,CAAC;MACDK,MAAM,EAAE;QACNC,MAAM,EAAE,sBAAsB;UAAA,IAAnBR,KAAK,QAALA,KAAK;YAAEI,KAAK,QAALA,KAAK;UACrBK,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAACV,KAAK,CAAC;UACpCS,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAACN,KAAK,CAAC;QACtC,CAAC;QACDO,UAAU,EAAC,oBAACC,CAAC,EAAG;UAAA,IACTZ,KAAK,GAAQY,CAAC,CAAdZ,KAAK;YAACI,KAAK,GAAEQ,CAAC,CAARR,KAAK;UAChB,IAAIA,KAAK,CAACS,MAAM,IAAE,CAAC,EAAC;YAClBJ,OAAO,CAACC,GAAG,CAAC,aAAa,GAACN,KAAK,GAAC,UAAU,GAACJ,KAAK,CAAC;UACnD;QACF;MACF;IACF,CAAC,CAAC;IAAA;IA7BKc,KAAK;IAAEC,QAAQ;EAAA,IA8BdhB,KAAK,GAAae,KAAK,CAAvBf,KAAK;IAAEQ,MAAM,GAAKO,KAAK,CAAhBP,MAAM;EAErB,IAAMS,OAAO,GAAG;IACdC,MAAM,EAAE;MACNC,YAAY,EAAE;IAChB,CAAC;IACDd,KAAK,EAAE;MACLD,KAAK,EAAE;IACT,CAAC;IACDgB,MAAM,EAAE;EACV,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,oBAAC,KAAK;MAAC,KAAK,EAAEpB,KAAM;MAAC,OAAO,EAAEiB,OAAQ;MAAC,MAAM,EAAET,MAAO;MAAC,KAAK,EAAE;QAAEY,MAAM,EAAE;MAAQ,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA;EAAG;AAEzF;AAEA,eAAetB,GAAG;;AAGlB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module"}