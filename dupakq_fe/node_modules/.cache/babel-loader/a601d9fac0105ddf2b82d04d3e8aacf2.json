{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bookmark = void 0;\nvar util = __importStar(require(\"./util\"));\nvar BOOKMARKS_KEY = 'bookmarks';\nvar Bookmark = /** @class */function () {\n  /**\n   * @constructor\n   * @param {string|string[]} values single bookmark as string or multiple bookmarks as a string array.\n   */\n  function Bookmark(values) {\n    this._values = asStringArray(values);\n  }\n  Bookmark.empty = function () {\n    return EMPTY_BOOKMARK;\n  };\n  /**\n   * Check if the given bookmark is meaningful and can be send to the database.\n   * @return {boolean} returns `true` bookmark has a value, `false` otherwise.\n   */\n  Bookmark.prototype.isEmpty = function () {\n    return this._values.length === 0;\n  };\n  /**\n   * Get all bookmark values as an array.\n   * @return {string[]} all values.\n   */\n  Bookmark.prototype.values = function () {\n    return this._values;\n  };\n  /**\n   * Get this bookmark as an object for begin transaction call.\n   * @return {Object} the value of this bookmark as object.\n   */\n  Bookmark.prototype.asBeginTransactionParameters = function () {\n    var _a;\n    if (this.isEmpty()) {\n      return {};\n    }\n    // Driver sends {bookmark: \"max\", bookmarks: [\"one\", \"two\", \"max\"]} instead of simple\n    // {bookmarks: [\"one\", \"two\", \"max\"]} for backwards compatibility reasons. Old servers can only accept single\n    // bookmark that is why driver has to parse and compare given list of bookmarks. This functionality will\n    // eventually be removed.\n    return _a = {}, _a[BOOKMARKS_KEY] = this._values, _a;\n  };\n  return Bookmark;\n}();\nexports.Bookmark = Bookmark;\nvar EMPTY_BOOKMARK = new Bookmark(null);\n/**\n * Converts given value to an array.\n * @param {string|string[]|Array} [value=undefined] argument to convert.\n * @return {string[]} value converted to an array.\n */\nfunction asStringArray(value) {\n  if (!value) {\n    return [];\n  }\n  if (util.isString(value)) {\n    return [value];\n  }\n  if (Array.isArray(value)) {\n    var result = [];\n    var flattenedValue = flattenArray(value);\n    for (var i = 0; i < flattenedValue.length; i++) {\n      var element = flattenedValue[i];\n      // if it is undefined or null, ignore it\n      if (element !== undefined && element !== null) {\n        if (!util.isString(element)) {\n          throw new TypeError(\"Bookmark value should be a string, given: '\" + element + \"'\");\n        }\n        result.push(element);\n      }\n    }\n    return result;\n  }\n  throw new TypeError(\"Bookmark should either be a string or a string array, given: '\" + value + \"'\");\n}\n/**\n * Recursively flattens an array so that the result becomes a single array\n * of values, which does not include any sub-arrays\n *\n * @param {Array} value\n */\nfunction flattenArray(values) {\n  return values.reduce(function (dest, value) {\n    return Array.isArray(value) ? dest.concat(flattenArray(value)) : dest.concat(value);\n  }, []);\n}","map":null,"metadata":{},"sourceType":"script"}