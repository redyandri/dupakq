{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alloc = void 0;\nvar buffer_1 = __importDefault(require(\"buffer\"));\nvar buf_1 = __importDefault(require(\"../buf\"));\nvar ChannelBuffer = /** @class */function (_super) {\n  __extends(ChannelBuffer, _super);\n  function ChannelBuffer(arg) {\n    var _this = this;\n    var buffer = newChannelJSBuffer(arg);\n    _this = _super.call(this, buffer.length) || this;\n    _this._buffer = buffer;\n    return _this;\n  }\n  ChannelBuffer.prototype.getUInt8 = function (position) {\n    return this._buffer.readUInt8(position);\n  };\n  ChannelBuffer.prototype.getInt8 = function (position) {\n    return this._buffer.readInt8(position);\n  };\n  ChannelBuffer.prototype.getFloat64 = function (position) {\n    return this._buffer.readDoubleBE(position);\n  };\n  ChannelBuffer.prototype.putUInt8 = function (position, val) {\n    this._buffer.writeUInt8(val, position);\n  };\n  ChannelBuffer.prototype.putInt8 = function (position, val) {\n    this._buffer.writeInt8(val, position);\n  };\n  ChannelBuffer.prototype.putFloat64 = function (position, val) {\n    this._buffer.writeDoubleBE(val, position);\n  };\n  ChannelBuffer.prototype.putBytes = function (position, val) {\n    if (val instanceof ChannelBuffer) {\n      var bytesToCopy = Math.min(val.length - val.position, this.length - position);\n      val._buffer.copy(this._buffer, position, val.position, val.position + bytesToCopy);\n      val.position += bytesToCopy;\n    } else {\n      _super.prototype.putBytes.call(this, position, val);\n    }\n  };\n  ChannelBuffer.prototype.getSlice = function (start, length) {\n    return new ChannelBuffer(this._buffer.slice(start, start + length));\n  };\n  return ChannelBuffer;\n}(buf_1.default);\nexports.default = ChannelBuffer;\n/**\n * Allocate a buffer\n *\n * @param {number} size The buffer sizzer\n * @returns {BaseBuffer} The buffer\n */\nfunction alloc(size) {\n  return new ChannelBuffer(size);\n}\nexports.alloc = alloc;\nfunction newChannelJSBuffer(arg) {\n  if (arg instanceof buffer_1.default.Buffer) {\n    return arg;\n  } else if (typeof arg === 'number' && typeof buffer_1.default.Buffer.alloc === 'function') {\n    // use static factory function present in newer NodeJS versions to allocate new buffer with specified size\n    return buffer_1.default.Buffer.alloc(arg);\n  } else {\n    // fallback to the old, potentially deprecated constructor\n    // eslint-disable-next-line node/no-deprecated-api\n    return new buffer_1.default.Buffer(arg);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}