{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar bolt_protocol_util_1 = require(\"./bolt-protocol-util\");\nvar packstream_1 = require(\"../packstream\");\nvar request_message_1 = __importDefault(require(\"./request-message\"));\nvar stream_observers_1 = require(\"./stream-observers\");\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark,\n  _a = neo4j_driver_core_1.internal.constants,\n  ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE,\n  BOLT_PROTOCOL_V1 = _a.BOLT_PROTOCOL_V1,\n  Logger = neo4j_driver_core_1.internal.logger.Logger,\n  TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\nvar BoltProtocol = /** @class */function () {\n  /**\n   * @callback CreateResponseHandler Creates the response handler\n   * @param {BoltProtocol} protocol The bolt protocol\n   * @returns {ResponseHandler} The response handler\n   */\n  /**\n   * @callback OnProtocolError Handles protocol error\n   * @param {string} error The description\n   */\n  /**\n   * @constructor\n   * @param {Object} server the server informatio.\n   * @param {Chunker} chunker the chunker.\n   * @param {Object} packstreamConfig Packstream configuration\n   * @param {boolean} packstreamConfig.disableLosslessIntegers if this connection should convert all received integers to native JS numbers.\n   * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.\n   * @param {CreateResponseHandler} createResponseHandler Function which creates the response handler\n   * @param {Logger} log the logger\n   * @param {OnProtocolError} onProtocolError handles protocol errors\n   */\n  function BoltProtocol(server, chunker, _a, createResponseHandler, log, onProtocolError) {\n    var _b = _a === void 0 ? {} : _a,\n      disableLosslessIntegers = _b.disableLosslessIntegers,\n      useBigInt = _b.useBigInt;\n    if (createResponseHandler === void 0) {\n      createResponseHandler = function createResponseHandler() {\n        return null;\n      };\n    }\n    this._server = server || {};\n    this._chunker = chunker;\n    this._packer = this._createPacker(chunker);\n    this._unpacker = this._createUnpacker(disableLosslessIntegers, useBigInt);\n    this._responseHandler = createResponseHandler(this);\n    this._log = log;\n    this._onProtocolError = onProtocolError;\n    this._fatalError = null;\n  }\n  Object.defineProperty(BoltProtocol.prototype, \"version\", {\n    /**\n     * Returns the numerical version identifier for this protocol\n     */\n    get: function get() {\n      return BOLT_PROTOCOL_V1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Get the packer.\n   * @return {Packer} the protocol's packer.\n   */\n  BoltProtocol.prototype.packer = function () {\n    return this._packer;\n  };\n  /**\n   * Get the unpacker.\n   * @return {Unpacker} the protocol's unpacker.\n   */\n  BoltProtocol.prototype.unpacker = function () {\n    return this._unpacker;\n  };\n  /**\n   * Transform metadata received in SUCCESS message before it is passed to the handler.\n   * @param {Object} metadata the received metadata.\n   * @return {Object} transformed metadata.\n   */\n  BoltProtocol.prototype.transformMetadata = function (metadata) {\n    return metadata;\n  };\n  /**\n   * Perform initialization and authentication of the underlying connection.\n   * @param {Object} param\n   * @param {string} param.userAgent the user agent.\n   * @param {Object} param.authToken the authentication token.\n   * @param {function(err: Error)} param.onError the callback to invoke on error.\n   * @param {function()} param.onComplete the callback to invoke on completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.initialize = function (_a) {\n    var _this = this;\n    var _b = _a === void 0 ? {} : _a,\n      userAgent = _b.userAgent,\n      authToken = _b.authToken,\n      _onError = _b.onError,\n      onComplete = _b.onComplete;\n    var observer = new stream_observers_1.LoginObserver({\n      onError: function onError(error) {\n        return _this._onLoginError(error, _onError);\n      },\n      onCompleted: function onCompleted(metadata) {\n        return _this._onLoginCompleted(metadata, onComplete);\n      }\n    });\n    this.write(request_message_1.default.init(userAgent, authToken), observer, true);\n    return observer;\n  };\n  /**\n   * Perform protocol related operations for closing this connection\n   */\n  BoltProtocol.prototype.prepareToClose = function () {\n    // no need to notify the database in this protocol version\n  };\n  /**\n   * Begin an explicit transaction.\n   * @param {Object} param\n   * @param {Bookmark} param.bookmark the bookmark.\n   * @param {TxConfig} param.txConfig the configuration.\n   * @param {string} param.database the target database name.\n   * @param {string} param.mode the access mode.\n   * @param {string} param.impersonatedUser the impersonated user\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.beginTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmark = _b.bookmark,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete;\n    return this.run('BEGIN', bookmark ? bookmark.asBeginTransactionParameters() : {}, {\n      bookmark: bookmark,\n      txConfig: txConfig,\n      database: database,\n      mode: mode,\n      impersonatedUser: impersonatedUser,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete,\n      flush: false\n    });\n  };\n  /**\n   * Commit the explicit transaction.\n   * @param {Object} param\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.commitTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete;\n    // WRITE access mode is used as a place holder here, it has\n    // no effect on behaviour for Bolt V1 & V2\n    return this.run('COMMIT', {}, {\n      bookmark: Bookmark.empty(),\n      txConfig: TxConfig.empty(),\n      mode: ACCESS_MODE_WRITE,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n  };\n  /**\n   * Rollback the explicit transaction.\n   * @param {Object} param\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.rollbackTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete;\n    // WRITE access mode is used as a place holder here, it has\n    // no effect on behaviour for Bolt V1 & V2\n    return this.run('ROLLBACK', {}, {\n      bookmark: Bookmark.empty(),\n      txConfig: TxConfig.empty(),\n      mode: ACCESS_MODE_WRITE,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n  };\n  /**\n   * Send a Cypher query through the underlying connection.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @param {Object} param\n   * @param {Bookmark} param.bookmark the bookmark.\n   * @param {TxConfig} param.txConfig the transaction configuration.\n   * @param {string} param.database the target database name.\n   * @param {string} param.impersonatedUser the impersonated user\n   * @param {string} param.mode the access mode.\n   * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.\n   * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @param {boolean} param.flush whether to flush the buffered messages.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.run = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmark = _b.bookmark,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      beforeKeys = _b.beforeKeys,\n      afterKeys = _b.afterKeys,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete,\n      _c = _b.flush,\n      flush = _c === void 0 ? true : _c;\n    var observer = new stream_observers_1.ResultStreamObserver({\n      server: this._server,\n      beforeKeys: beforeKeys,\n      afterKeys: afterKeys,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n    // bookmark and mode are ignored in this version of the protocol\n    (0, bolt_protocol_util_1.assertTxConfigIsEmpty)(txConfig, this._onProtocolError, observer);\n    // passing in a database name on this protocol version throws an error\n    (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);\n    // passing impersonated user on this protocol version throws an error\n    (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);\n    this.write(request_message_1.default.run(query, parameters), observer, false);\n    this.write(request_message_1.default.pullAll(), observer, flush);\n    return observer;\n  };\n  Object.defineProperty(BoltProtocol.prototype, \"currentFailure\", {\n    get: function get() {\n      return this._responseHandler.currentFailure;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Send a RESET through the underlying connection.\n   * @param {Object} param\n   * @param {function(err: Error)} param.onError the callback to invoke on error.\n   * @param {function()} param.onComplete the callback to invoke on completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n  BoltProtocol.prototype.reset = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      onError = _b.onError,\n      onComplete = _b.onComplete;\n    var observer = new stream_observers_1.ResetObserver({\n      onProtocolError: this._onProtocolError,\n      onError: onError,\n      onComplete: onComplete\n    });\n    this.write(request_message_1.default.reset(), observer, true);\n    return observer;\n  };\n  BoltProtocol.prototype._createPacker = function (chunker) {\n    return new packstream_1.v1.Packer(chunker);\n  };\n  BoltProtocol.prototype._createUnpacker = function (disableLosslessIntegers, useBigInt) {\n    return new packstream_1.v1.Unpacker(disableLosslessIntegers, useBigInt);\n  };\n  /**\n   * Write a message to the network channel.\n   * @param {RequestMessage} message the message to write.\n   * @param {StreamObserver} observer the response observer.\n   * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\n   */\n  BoltProtocol.prototype.write = function (message, observer, flush) {\n    var _this = this;\n    var queued = this.queueObserverIfProtocolIsNotBroken(observer);\n    if (queued) {\n      if (this._log.isDebugEnabled()) {\n        this._log.debug(\"C: \" + message);\n      }\n      this.packer().packStruct(message.signature, message.fields.map(function (field) {\n        return _this.packer().packable(field);\n      }));\n      this._chunker.messageBoundary();\n      if (flush) {\n        this._chunker.flush();\n      }\n    }\n  };\n  /**\n   * Notifies faltal erros to the observers and mark the protocol in the fatal error state.\n   * @param {Error} error The error\n   */\n  BoltProtocol.prototype.notifyFatalError = function (error) {\n    this._fatalError = error;\n    return this._responseHandler._notifyErrorToObservers(error);\n  };\n  /**\n   * Updates the the current observer with the next one on the queue.\n   */\n  BoltProtocol.prototype.updateCurrentObserver = function () {\n    return this._responseHandler._updateCurrentObserver();\n  };\n  /**\n   * Checks if exist an ongoing observable requests\n   * @return {boolean}\n   */\n  BoltProtocol.prototype.hasOngoingObservableRequests = function () {\n    return this._responseHandler.hasOngoingObservableRequests();\n  };\n  /**\n   * Enqueue the observer if the protocol is not broken.\n   * In case it's broken, the observer will be notified about the error.\n   *\n   * @param {StreamObserver} observer The observer\n   * @returns {boolean} if it was queued\n   */\n  BoltProtocol.prototype.queueObserverIfProtocolIsNotBroken = function (observer) {\n    if (this.isBroken()) {\n      this.notifyFatalErrorToObserver(observer);\n      return false;\n    }\n    return this._responseHandler._queueObserver(observer);\n  };\n  /**\n   * Veritfy the protocol is not broken.\n   * @returns {boolean}\n   */\n  BoltProtocol.prototype.isBroken = function () {\n    return !!this._fatalError;\n  };\n  /**\n   * Notifies the current fatal error to the observer\n   *\n   * @param {StreamObserver} observer The observer\n   */\n  BoltProtocol.prototype.notifyFatalErrorToObserver = function (observer) {\n    if (observer && observer.onError) {\n      observer.onError(this._fatalError);\n    }\n  };\n  /**\n   * Reset current failure on the observable response handler to null.\n   */\n  BoltProtocol.prototype.resetFailure = function () {\n    this._responseHandler._resetFailure();\n  };\n  BoltProtocol.prototype._onLoginCompleted = function (metadata, onCompleted) {\n    if (metadata) {\n      var serverVersion = metadata.server;\n      if (!this._server.version) {\n        this._server.version = serverVersion;\n      }\n    }\n    if (onCompleted) {\n      onCompleted(metadata);\n    }\n  };\n  BoltProtocol.prototype._onLoginError = function (error, onError) {\n    this._onProtocolError(error.message);\n    if (onError) {\n      onError(error);\n    }\n  };\n  return BoltProtocol;\n}();\nexports.default = BoltProtocol;","map":null,"metadata":{},"sourceType":"script"}