{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar buf_1 = require(\"../buf\");\nvar channel_buf_1 = require(\"./channel-buf\");\n/**\n * Buffer that combines multiple buffers, exposing them as one single buffer.\n */\nvar CombinedBuffer = /** @class */function (_super) {\n  __extends(CombinedBuffer, _super);\n  function CombinedBuffer(buffers) {\n    var _this = this;\n    var length = 0;\n    for (var i = 0; i < buffers.length; i++) {\n      length += buffers[i].length;\n    }\n    _this = _super.call(this, length) || this;\n    _this._buffers = buffers;\n    return _this;\n  }\n  CombinedBuffer.prototype.getUInt8 = function (position) {\n    // Surely there's a faster way to do this.. some sort of lookup table thing?\n    for (var i = 0; i < this._buffers.length; i++) {\n      var buffer = this._buffers[i];\n      // If the position is not in the current buffer, skip the current buffer\n      if (position >= buffer.length) {\n        position -= buffer.length;\n      } else {\n        return buffer.getUInt8(position);\n      }\n    }\n  };\n  CombinedBuffer.prototype.getInt8 = function (position) {\n    // Surely there's a faster way to do this.. some sort of lookup table thing?\n    for (var i = 0; i < this._buffers.length; i++) {\n      var buffer = this._buffers[i];\n      // If the position is not in the current buffer, skip the current buffer\n      if (position >= buffer.length) {\n        position -= buffer.length;\n      } else {\n        return buffer.getInt8(position);\n      }\n    }\n  };\n  CombinedBuffer.prototype.getFloat64 = function (position) {\n    // At some point, a more efficient impl. For now, we copy the 8 bytes\n    // we want to read and depend on the platform impl of IEEE 754.\n    var b = (0, channel_buf_1.alloc)(8);\n    for (var i = 0; i < 8; i++) {\n      b.putUInt8(i, this.getUInt8(position + i));\n    }\n    return b.getFloat64(0);\n  };\n  return CombinedBuffer;\n}(buf_1.BaseBuffer);\nexports.default = CombinedBuffer;","map":null,"metadata":{},"sourceType":"script"}