{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertImpersonatedUserIsEmpty = exports.assertTxConfigIsEmpty = exports.assertDatabaseIsEmpty = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n/**\n * @param {TxConfig} txConfig the auto-commit transaction configuration.\n * @param {function(error: string)} onProtocolError called when the txConfig is not empty.\n * @param {ResultStreamObserver} observer the response observer.\n */\nfunction assertTxConfigIsEmpty(txConfig, onProtocolError, observer) {\n  if (onProtocolError === void 0) {\n    onProtocolError = function onProtocolError() {};\n  }\n  if (txConfig && !txConfig.isEmpty()) {\n    var error = (0, neo4j_driver_core_1.newError)('Driver is connected to the database that does not support transaction configuration. ' + 'Please upgrade to neo4j 3.5.0 or later in order to use this functionality');\n    // unsupported API was used, consider this a fatal error for the current connection\n    onProtocolError(error.message);\n    observer.onError(error);\n    throw error;\n  }\n}\nexports.assertTxConfigIsEmpty = assertTxConfigIsEmpty;\n/**\n * Asserts that the passed-in database name is empty.\n * @param {string} database\n * @param {fuction(err: String)} onProtocolError Called when it doesn't have database set\n */\nfunction assertDatabaseIsEmpty(database, onProtocolError, observer) {\n  if (onProtocolError === void 0) {\n    onProtocolError = function onProtocolError() {};\n  }\n  if (database) {\n    var error = (0, neo4j_driver_core_1.newError)('Driver is connected to the database that does not support multiple databases. ' + 'Please upgrade to neo4j 4.0.0 or later in order to use this functionality');\n    // unsupported API was used, consider this a fatal error for the current connection\n    onProtocolError(error.message);\n    observer.onError(error);\n    throw error;\n  }\n}\nexports.assertDatabaseIsEmpty = assertDatabaseIsEmpty;\n/**\n * Asserts that the passed-in impersonated user is empty\n * @param {string} impersonatedUser\n * @param {function (err:Error)} onProtocolError Called when it does have impersonated user set\n * @param {any} observer\n */\nfunction assertImpersonatedUserIsEmpty(impersonatedUser, onProtocolError, observer) {\n  if (onProtocolError === void 0) {\n    onProtocolError = function onProtocolError() {};\n  }\n  if (impersonatedUser) {\n    var error = (0, neo4j_driver_core_1.newError)('Driver is connected to the database that does not support user impersonation. ' + 'Please upgrade to neo4j 4.4.0 or later in order to use this functionality. ' + (\"Trying to impersonate \" + impersonatedUser + \".\"));\n    // unsupported API was used, consider this a fatal error for the current connection\n    onProtocolError(error.message);\n    observer.onError(error);\n    throw error;\n  }\n}\nexports.assertImpersonatedUserIsEmpty = assertImpersonatedUserIsEmpty;","map":null,"metadata":{},"sourceType":"script"}