{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Connection = /** @class */function () {\n  /**\n   * @param {ConnectionErrorHandler} errorHandler the error handler\n   */\n  function Connection(errorHandler) {\n    this._errorHandler = errorHandler;\n  }\n  Object.defineProperty(Connection.prototype, \"id\", {\n    get: function get() {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"databaseId\", {\n    get: function get() {\n      throw new Error('not implemented');\n    },\n    set: function set(value) {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @returns {boolean} whether this connection is in a working condition\n   */\n  Connection.prototype.isOpen = function () {\n    throw new Error('not implemented');\n  };\n  /**\n   * @returns {BoltProtocol} the underlying bolt protocol assigned to this connection\n   */\n  Connection.prototype.protocol = function () {\n    throw new Error('not implemented');\n  };\n  Object.defineProperty(Connection.prototype, \"address\", {\n    /**\n     * @returns {ServerAddress} the server address this connection is opened against\n     */\n    get: function get() {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"version\", {\n    /**\n     * @returns {ServerVersion} the version of the server this connection is connected to\n     */\n    get: function get() {\n      throw new Error('not implemented');\n    },\n    set: function set(value) {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"server\", {\n    get: function get() {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Connect to the target address, negotiate Bolt protocol and send initialization message.\n   * @param {string} userAgent the user agent for this driver.\n   * @param {Object} authToken the object containing auth information.\n   * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.\n   */\n  Connection.prototype.connect = function (userAgent, authToken) {\n    throw new Error('not implemented');\n  };\n  /**\n   * Write a message to the network channel.\n   * @param {RequestMessage} message the message to write.\n   * @param {ResultStreamObserver} observer the response observer.\n   * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\n   */\n  Connection.prototype.write = function (message, observer, flush) {\n    throw new Error('not implemented');\n  };\n  /**\n   * Send a RESET-message to the database. Message is immediately flushed to the network.\n   * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.\n   */\n  Connection.prototype.resetAndFlush = function () {\n    throw new Error('not implemented');\n  };\n  /**\n   * Call close on the channel.\n   * @returns {Promise<void>} - A promise that will be resolved when the connection is closed.\n   *\n   */\n  Connection.prototype.close = function () {\n    throw new Error('not implemented');\n  };\n  /**\n   *\n   * @param error\n   * @param address\n   * @returns {Neo4jError|*}\n   */\n  Connection.prototype.handleAndTransformError = function (error, address) {\n    if (this._errorHandler) {\n      return this._errorHandler.handleAndTransformError(error, address);\n    }\n    return error;\n  };\n  return Connection;\n}();\nexports.default = Connection;","map":null,"metadata":{},"sourceType":"script"}