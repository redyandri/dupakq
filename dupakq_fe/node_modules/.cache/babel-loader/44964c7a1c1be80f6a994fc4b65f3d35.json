{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectivityVerifier = void 0;\nvar connection_holder_1 = require(\"./connection-holder\");\nvar constants_1 = require(\"./constants\");\nvar error_1 = require(\"../error\");\n/**\n * Verifies connectivity using the given connection provider.\n */\nvar ConnectivityVerifier = /** @class */function () {\n  /**\n   * @constructor\n   * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\n   */\n  function ConnectivityVerifier(connectionProvider) {\n    this._connectionProvider = connectionProvider;\n  }\n  /**\n   * Try to obtain a working connection from the connection provider.\n   * @returns {Promise<object>} promise resolved with server info or rejected with error.\n   */\n  ConnectivityVerifier.prototype.verify = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.database,\n      database = _c === void 0 ? '' : _c;\n    return acquireAndReleaseDummyConnection(this._connectionProvider, database);\n  };\n  return ConnectivityVerifier;\n}();\nexports.ConnectivityVerifier = ConnectivityVerifier;\n/**\n * @private\n * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\n * @param {string|undefined} database The database name\n * @return {Promise<object>} promise resolved with server info or rejected with error.\n */\nfunction acquireAndReleaseDummyConnection(connectionProvider, database) {\n  var connectionHolder = new connection_holder_1.ConnectionHolder({\n    mode: constants_1.ACCESS_MODE_READ,\n    database: database,\n    connectionProvider: connectionProvider\n  });\n  connectionHolder.initializeConnection();\n  return connectionHolder.getConnection().then(function (connection) {\n    // able to establish a connection\n    if (!connection) {\n      throw (0, error_1.newError)('Unexpected error acquiring transaction');\n    }\n    return connectionHolder.close().then(function () {\n      return connection.server;\n    });\n  }).catch(function (error) {\n    // failed to establish a connection\n    return connectionHolder.close().catch(function (ignoredError) {\n      // ignore connection release error\n    }).then(function () {\n      return Promise.reject(error);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}