{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar connection_1 = require(\"../connection\");\nvar pool_1 = __importStar(require(\"../pool\"));\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;\nvar PooledConnectionProvider = /** @class */function (_super) {\n  __extends(PooledConnectionProvider, _super);\n  function PooledConnectionProvider(_a, createChannelConnectionHook) {\n    var id = _a.id,\n      config = _a.config,\n      log = _a.log,\n      userAgent = _a.userAgent,\n      authToken = _a.authToken;\n    if (createChannelConnectionHook === void 0) {\n      createChannelConnectionHook = null;\n    }\n    var _this = _super.call(this) || this;\n    _this._id = id;\n    _this._config = config;\n    _this._log = log;\n    _this._userAgent = userAgent;\n    _this._authToken = authToken;\n    _this._createChannelConnection = createChannelConnectionHook || function (address) {\n      return (0, connection_1.createChannelConnection)(address, _this._config, _this._createConnectionErrorHandler(), _this._log);\n    };\n    _this._connectionPool = new pool_1.default({\n      create: _this._createConnection.bind(_this),\n      destroy: _this._destroyConnection.bind(_this),\n      validate: _this._validateConnection.bind(_this),\n      installIdleObserver: PooledConnectionProvider._installIdleObserverOnConnection.bind(_this),\n      removeIdleObserver: PooledConnectionProvider._removeIdleObserverOnConnection.bind(_this),\n      config: pool_1.PoolConfig.fromDriverConfig(config),\n      log: _this._log\n    });\n    _this._openConnections = {};\n    return _this;\n  }\n  PooledConnectionProvider.prototype._createConnectionErrorHandler = function () {\n    return new connection_1.ConnectionErrorHandler(SERVICE_UNAVAILABLE);\n  };\n  /**\n   * Create a new connection and initialize it.\n   * @return {Promise<Connection>} promise resolved with a new connection or rejected when failed to connect.\n   * @access private\n   */\n  PooledConnectionProvider.prototype._createConnection = function (address, release) {\n    var _this = this;\n    return this._createChannelConnection(address).then(function (connection) {\n      connection._release = function () {\n        return release(address, connection);\n      };\n      _this._openConnections[connection.id] = connection;\n      return connection.connect(_this._userAgent, _this._authToken).catch(function (error) {\n        // let's destroy this connection\n        _this._destroyConnection(connection);\n        // propagate the error because connection failed to connect / initialize\n        throw error;\n      });\n    });\n  };\n  /**\n   * Check that a connection is usable\n   * @return {boolean} true if the connection is open\n   * @access private\n   **/\n  PooledConnectionProvider.prototype._validateConnection = function (conn) {\n    if (!conn.isOpen()) {\n      return false;\n    }\n    var maxConnectionLifetime = this._config.maxConnectionLifetime;\n    var lifetime = Date.now() - conn.creationTimestamp;\n    return lifetime <= maxConnectionLifetime;\n  };\n  /**\n   * Dispose of a connection.\n   * @return {Connection} the connection to dispose.\n   * @access private\n   */\n  PooledConnectionProvider.prototype._destroyConnection = function (conn) {\n    delete this._openConnections[conn.id];\n    return conn.close();\n  };\n  PooledConnectionProvider.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // purge all idle connections in the connection pool\n            return [4 /*yield*/, this._connectionPool.close()\n            // then close all connections driver has ever created\n            // it is needed to close connections that are active right now and are acquired from the pool\n            ];\n\n          case 1:\n            // purge all idle connections in the connection pool\n            _a.sent();\n            // then close all connections driver has ever created\n            // it is needed to close connections that are active right now and are acquired from the pool\n            return [4 /*yield*/, Promise.all(Object.values(this._openConnections).map(function (c) {\n              return c.close();\n            }))];\n          case 2:\n            // then close all connections driver has ever created\n            // it is needed to close connections that are active right now and are acquired from the pool\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PooledConnectionProvider._installIdleObserverOnConnection = function (conn, observer) {\n    conn._queueObserver(observer);\n  };\n  PooledConnectionProvider._removeIdleObserverOnConnection = function (conn) {\n    conn._updateCurrentObserver();\n  };\n  return PooledConnectionProvider;\n}(neo4j_driver_core_1.ConnectionProvider);\nexports.default = PooledConnectionProvider;","map":null,"metadata":{},"sourceType":"script"}