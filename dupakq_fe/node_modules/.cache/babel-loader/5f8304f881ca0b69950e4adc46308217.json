{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxConfig = void 0;\nvar util = __importStar(require(\"./util\"));\nvar error_1 = require(\"../error\");\nvar integer_1 = require(\"../integer\");\n/**\n * Internal holder of the transaction configuration.\n * It performs input validation and value conversion for further serialization by the Bolt protocol layer.\n * Users of the driver provide transaction configuration as regular objects `{timeout: 10, metadata: {key: 'value'}}`.\n * Driver converts such objects to {@link TxConfig} immediately and uses converted values everywhere.\n */\nvar TxConfig = /** @class */function () {\n  /**\n   * @constructor\n   * @param {Object} config the raw configuration object.\n   */\n  function TxConfig(config) {\n    assertValidConfig(config);\n    this.timeout = extractTimeout(config);\n    this.metadata = extractMetadata(config);\n  }\n  /**\n   * Get an empty config object.\n   * @return {TxConfig} an empty config.\n   */\n  TxConfig.empty = function () {\n    return EMPTY_CONFIG;\n  };\n  /**\n   * Check if this config object is empty. I.e. has no configuration values specified.\n   * @return {boolean} `true` if this object is empty, `false` otherwise.\n   */\n  TxConfig.prototype.isEmpty = function () {\n    return Object.values(this).every(function (value) {\n      return value == null;\n    });\n  };\n  return TxConfig;\n}();\nexports.TxConfig = TxConfig;\nvar EMPTY_CONFIG = new TxConfig({});\n/**\n * @return {Integer|null}\n */\nfunction extractTimeout(config) {\n  if (util.isObject(config) && (config.timeout || config.timeout === 0)) {\n    util.assertNumberOrInteger(config.timeout, 'Transaction timeout');\n    var timeout = (0, integer_1.int)(config.timeout);\n    if (timeout.isZero()) {\n      throw (0, error_1.newError)('Transaction timeout should not be zero');\n    }\n    if (timeout.isNegative()) {\n      throw (0, error_1.newError)('Transaction timeout should not be negative');\n    }\n    return timeout;\n  }\n  return null;\n}\n/**\n * @return {object|null}\n */\nfunction extractMetadata(config) {\n  if (util.isObject(config) && config.metadata) {\n    var metadata = config.metadata;\n    util.assertObject(metadata, 'config.metadata');\n    if (Object.keys(metadata).length !== 0) {\n      // not an empty object\n      return metadata;\n    }\n  }\n  return null;\n}\nfunction assertValidConfig(config) {\n  if (config) {\n    util.assertObject(config, 'Transaction config');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}