{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar channel_1 = require(\"../channel\");\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar BOLT_MAGIC_PREAMBLE = 0x6060b017;\nfunction version(major, minor) {\n  return {\n    major: major,\n    minor: minor\n  };\n}\nfunction createHandshakeMessage(versions) {\n  if (versions.length > 4) {\n    throw (0, neo4j_driver_core_1.newError)('It should not have more than 4 versions of the protocol');\n  }\n  var handshakeBuffer = (0, channel_1.alloc)(5 * 4);\n  handshakeBuffer.writeInt32(BOLT_MAGIC_PREAMBLE);\n  versions.forEach(function (version) {\n    if (version instanceof Array) {\n      var _a = version[0],\n        major = _a.major,\n        minor = _a.minor;\n      var minMinor = version[1].minor;\n      var range = minor - minMinor;\n      handshakeBuffer.writeInt32(range << 16 | minor << 8 | major);\n    } else {\n      var major = version.major,\n        minor = version.minor;\n      handshakeBuffer.writeInt32(minor << 8 | major);\n    }\n  });\n  handshakeBuffer.reset();\n  return handshakeBuffer;\n}\nfunction parseNegotiatedResponse(buffer) {\n  var h = [buffer.readUInt8(), buffer.readUInt8(), buffer.readUInt8(), buffer.readUInt8()];\n  if (h[0] === 0x48 && h[1] === 0x54 && h[2] === 0x54 && h[3] === 0x50) {\n    throw (0, neo4j_driver_core_1.newError)('Server responded HTTP. Make sure you are not trying to connect to the http endpoint ' + '(HTTP defaults to port 7474 whereas BOLT defaults to port 7687)');\n  }\n  return Number(h[3] + '.' + h[2]);\n}\n/**\n * @return {BaseBuffer}\n * @private\n */\nfunction newHandshakeBuffer() {\n  return createHandshakeMessage([[version(4, 4), version(4, 2)], version(4, 1), version(4, 0), version(3, 0)]);\n}\n/**\n * This callback is displayed as a global member.\n * @callback BufferConsumerCallback\n * @param {buffer} buffer the remaining buffer\n */\n/**\n * @typedef HandshakeResult\n * @property {number} protocolVersion The protocol version negotiated in the handshake\n * @property {function(BufferConsumerCallback)} consumeRemainingBuffer A function to consume the remaining buffer if it exists\n */\n/**\n * Shake hands using the channel and return the protocol version\n *\n * @param {Channel} channel the channel use to shake hands\n * @returns {Promise<HandshakeResult>} Promise of protocol version and consumeRemainingBuffer\n */\nfunction handshake(channel) {\n  var _this = this;\n  return new Promise(function (resolve, reject) {\n    var handshakeErrorHandler = function handshakeErrorHandler(error) {\n      reject(error);\n    };\n    channel.onerror = handshakeErrorHandler.bind(_this);\n    if (channel._error) {\n      handshakeErrorHandler(channel._error);\n    }\n    channel.onmessage = function (buffer) {\n      try {\n        // read the response buffer and initialize the protocol\n        var protocolVersion = parseNegotiatedResponse(buffer);\n        resolve({\n          protocolVersion: protocolVersion,\n          consumeRemainingBuffer: function consumeRemainingBuffer(consumer) {\n            if (buffer.hasRemaining()) {\n              consumer(buffer.readSlice(buffer.remaining()));\n            }\n          }\n        });\n      } catch (e) {\n        reject(e);\n      }\n    };\n    channel.write(newHandshakeBuffer());\n  });\n}\nexports.default = handshake;","map":null,"metadata":{},"sourceType":"script"}