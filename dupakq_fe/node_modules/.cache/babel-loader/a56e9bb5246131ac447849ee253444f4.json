{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = void 0;\nvar integer_1 = __importStar(require(\"./integer\"));\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\nvar ResultSummary = /** @class */function () {\n  /**\n   * @constructor\n   * @param {string} query - The query this summary is for\n   * @param {Object} parameters - Parameters for the query\n   * @param {Object} metadata - Query metadata\n   * @param {number|undefined} protocolVersion - Bolt Protocol Version\n   */\n  function ResultSummary(query, parameters, metadata, protocolVersion) {\n    /**\n     * The query and parameters this summary is for.\n     * @type {{text: string, parameters: Object}}\n     * @public\n     */\n    this.query = {\n      text: query,\n      parameters: parameters\n    };\n    /**\n     * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n     * \"w\" for write-only query and \"s\" for schema-write query.\n     * String constants are available in {@link queryType} object.\n     * @type {string}\n     * @public\n     */\n    this.queryType = metadata.type;\n    /**\n     * Counters for operations the query triggered.\n     * @type {QueryStatistics}\n     * @public\n     */\n    this.counters = new QueryStatistics(metadata.stats || {});\n    // for backwards compatibility, remove in future version\n    /**\n     * Use {@link ResultSummary.counters} instead.\n     * @type {QueryStatistics}\n     * @deprecated\n     */\n    this.updateStatistics = this.counters;\n    /**\n     * This describes how the database will execute the query.\n     * Query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"EXPLAIN\".\n     * @type {Plan|false}\n     * @public\n     */\n    this.plan = metadata.plan || metadata.profile ? new Plan(metadata.plan || metadata.profile) : false;\n    /**\n     * This describes how the database did execute your query. This will contain detailed information about what\n     * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"PROFILE\".\n     * @type {ProfiledPlan}\n     * @public\n     */\n    this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\n    /**\n     * An array of notifications that might arise when executing the query. Notifications can be warnings about\n     * problematic queries or other valuable information that can be presented in a client. Unlike failures\n     * or errors, notifications do not affect the execution of a query.\n     * @type {Array<Notification>}\n     * @public\n     */\n    this.notifications = this._buildNotifications(metadata.notifications);\n    /**\n     * The basic information of the server where the result is obtained from.\n     * @type {ServerInfo}\n     * @public\n     */\n    this.server = new ServerInfo(metadata.server, protocolVersion);\n    /**\n     * The time it took the server to consume the result.\n     * @type {number}\n     * @public\n     */\n    this.resultConsumedAfter = metadata.result_consumed_after;\n    /**\n     * The time it took the server to make the result available for consumption in milliseconds.\n     * @type {number}\n     * @public\n     */\n    this.resultAvailableAfter = metadata.result_available_after;\n    /**\n     * The database name where this summary is obtained from.\n     * @type {{name: string}}\n     * @public\n     */\n    this.database = {\n      name: metadata.db || null\n    };\n  }\n  ResultSummary.prototype._buildNotifications = function (notifications) {\n    if (!notifications) {\n      return [];\n    }\n    return notifications.map(function (n) {\n      return new Notification(n);\n    });\n  };\n  /**\n   * Check if the result summary has a plan\n   * @return {boolean}\n   */\n  ResultSummary.prototype.hasPlan = function () {\n    return this.plan instanceof Plan;\n  };\n  /**\n   * Check if the result summary has a profile\n   * @return {boolean}\n   */\n  ResultSummary.prototype.hasProfile = function () {\n    return this.profile instanceof ProfiledPlan;\n  };\n  return ResultSummary;\n}();\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\nvar Plan = /** @class */function () {\n  /**\n   * Create a Plan instance\n   * @constructor\n   * @param {Object} plan - Object with plan data\n   */\n  function Plan(plan) {\n    this.operatorType = plan.operatorType;\n    this.identifiers = plan.identifiers;\n    this.arguments = plan.args;\n    this.children = plan.children ? plan.children.map(function (child) {\n      return new Plan(child);\n    }) : [];\n  }\n  return Plan;\n}();\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\nvar ProfiledPlan = /** @class */function () {\n  /**\n   * Create a ProfiledPlan instance\n   * @constructor\n   * @param {Object} profile - Object with profile data\n   */\n  function ProfiledPlan(profile) {\n    this.operatorType = profile.operatorType;\n    this.identifiers = profile.identifiers;\n    this.arguments = profile.args;\n    this.dbHits = valueOrDefault('dbHits', profile);\n    this.rows = valueOrDefault('rows', profile);\n    this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n    this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n    this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n    this.time = valueOrDefault('time', profile);\n    this.children = profile.children ? profile.children.map(function (child) {\n      return new ProfiledPlan(child);\n    }) : [];\n  }\n  ProfiledPlan.prototype.hasPageCacheStats = function () {\n    return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;\n  };\n  return ProfiledPlan;\n}();\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\nvar Stats = /** @class */function () {\n  /**\n   * @constructor\n   * @private\n   */\n  function Stats() {\n    /**\n     * nodes created\n     * @type {number}\n     * @public\n     */\n    this.nodesCreated = 0;\n    /**\n     * nodes deleted\n     * @type {number}\n     * @public\n     */\n    this.nodesDeleted = 0;\n    /**\n     * relationships created\n     * @type {number}\n     * @public\n     */\n    this.relationshipsCreated = 0;\n    /**\n     * relationships deleted\n     * @type {number}\n     * @public\n     */\n    this.relationshipsDeleted = 0;\n    /**\n     * properties set\n     * @type {number}\n     * @public\n     */\n    this.propertiesSet = 0;\n    /**\n     * labels added\n     * @type {number}\n     * @public\n     */\n    this.labelsAdded = 0;\n    /**\n     * labels removed\n     * @type {number}\n     * @public\n     */\n    this.labelsRemoved = 0;\n    /**\n     * indexes added\n     * @type {number}\n     * @public\n     */\n    this.indexesAdded = 0;\n    /**\n     * indexes removed\n     * @type {number}\n     * @public\n     */\n    this.indexesRemoved = 0;\n    /**\n     * constraints added\n     * @type {number}\n     * @public\n     */\n    this.constraintsAdded = 0;\n    /**\n     * constraints removed\n     * @type {number}\n     * @public\n     */\n    this.constraintsRemoved = 0;\n  }\n  return Stats;\n}();\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\nvar QueryStatistics = /** @class */function () {\n  /**\n   * Structurize the statistics\n   * @constructor\n   * @param {Object} statistics - Result statistics\n   */\n  function QueryStatistics(statistics) {\n    var _this = this;\n    this._stats = {\n      nodesCreated: 0,\n      nodesDeleted: 0,\n      relationshipsCreated: 0,\n      relationshipsDeleted: 0,\n      propertiesSet: 0,\n      labelsAdded: 0,\n      labelsRemoved: 0,\n      indexesAdded: 0,\n      indexesRemoved: 0,\n      constraintsAdded: 0,\n      constraintsRemoved: 0\n    };\n    this._systemUpdates = 0;\n    Object.keys(statistics).forEach(function (index) {\n      // To camelCase\n      var camelCaseIndex = index.replace(/(-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n      if (camelCaseIndex in _this._stats) {\n        _this._stats[camelCaseIndex] = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'systemUpdates') {\n        _this._systemUpdates = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'containsSystemUpdates') {\n        _this._containsSystemUpdates = statistics[index];\n      } else if (camelCaseIndex === 'containsUpdates') {\n        _this._containsUpdates = statistics[index];\n      }\n    });\n    this._stats = Object.freeze(this._stats);\n  }\n  /**\n   * Did the database get updated?\n   * @return {boolean}\n   */\n  QueryStatistics.prototype.containsUpdates = function () {\n    var _this = this;\n    return this._containsUpdates !== undefined ? this._containsUpdates : Object.keys(this._stats).reduce(function (last, current) {\n      return last + _this._stats[current];\n    }, 0) > 0;\n  };\n  /**\n   * Returns the query statistics updates in a dictionary.\n   * @returns {Stats}\n   */\n  QueryStatistics.prototype.updates = function () {\n    return this._stats;\n  };\n  /**\n   * Return true if the system database get updated, otherwise false\n   * @returns {boolean} - If the system database get updated or not.\n   */\n  QueryStatistics.prototype.containsSystemUpdates = function () {\n    return this._containsSystemUpdates !== undefined ? this._containsSystemUpdates : this._systemUpdates > 0;\n  };\n  /**\n   * @returns {number} - Number of system updates\n   */\n  QueryStatistics.prototype.systemUpdates = function () {\n    return this._systemUpdates;\n  };\n  return QueryStatistics;\n}();\nexports.QueryStatistics = QueryStatistics;\n/**\n * Class for Cypher notifications\n * @access public\n */\nvar Notification = /** @class */function () {\n  /**\n   * Create a Notification instance\n   * @constructor\n   * @param {Object} notification - Object with notification data\n   */\n  function Notification(notification) {\n    this.code = notification.code;\n    this.title = notification.title;\n    this.description = notification.description;\n    this.severity = notification.severity;\n    this.position = Notification._constructPosition(notification.position);\n  }\n  Notification._constructPosition = function (pos) {\n    if (!pos) {\n      return {};\n    }\n    return {\n      offset: intValue(pos.offset),\n      line: intValue(pos.line),\n      column: intValue(pos.column)\n    };\n  };\n  return Notification;\n}();\nexports.Notification = Notification;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\nvar ServerInfo = /** @class */function () {\n  /**\n   * Create a ServerInfo instance\n   * @constructor\n   * @param {Object} serverMeta - Object with serverMeta data\n   * @param {Object} connectionInfo - Bolt connection info\n   * @param {number} protocolVersion - Bolt Protocol Version\n   */\n  function ServerInfo(serverMeta, protocolVersion) {\n    if (serverMeta) {\n      /**\n       * The server adress\n       * @type {string}\n       * @public\n       */\n      this.address = serverMeta.address;\n      /**\n       * The server version string.\n       *\n       * See {@link ServerInfo#protocolVersion} and {@link ServerInfo#agent}\n       * @type {string}\n       * @deprecated in 4.3, please use ServerInfo#agent, ServerInfo#protocolVersion, or call the <i>dbms.components</i> procedure instead.\n       * <b>Method might be removed in the next major release.</b>\n       \n       * @public\n       */\n      this.version = serverMeta.version;\n      /**\n       * The server user agent string\n       * @type {string}\n       * @public\n       */\n      this.agent = serverMeta.version;\n    }\n    /**\n     * The protocol version used by the connection\n     * @type {number}\n     * @public\n     */\n    this.protocolVersion = protocolVersion;\n  }\n  return ServerInfo;\n}();\nexports.ServerInfo = ServerInfo;\nfunction intValue(value) {\n  if (value instanceof integer_1.default) {\n    return value.toInt();\n  } else if (typeof value == 'bigint') {\n    return (0, integer_1.int)(value).toInt();\n  } else {\n    return value;\n  }\n}\nfunction valueOrDefault(key, values, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = 0;\n  }\n  if (key in values) {\n    var value = values[key];\n    return intValue(value);\n  } else {\n    return defaultValue;\n  }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\nvar queryType = {\n  READ_ONLY: 'r',\n  READ_WRITE: 'rw',\n  WRITE_ONLY: 'w',\n  SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;","map":null,"metadata":{},"sourceType":"script"}