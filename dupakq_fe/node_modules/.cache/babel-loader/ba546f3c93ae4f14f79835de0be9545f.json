{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar util_1 = require(\"./internal/util\");\nvar connection_holder_1 = require(\"./internal/connection-holder\");\nvar bookmark_1 = require(\"./internal/bookmark\");\nvar tx_config_1 = require(\"./internal/tx-config\");\nvar observers_1 = require(\"./internal/observers\");\nvar error_1 = require(\"./error\");\nvar result_1 = __importDefault(require(\"./result\"));\n/**\n * Represents a transaction in the Neo4j database.\n *\n * @access public\n */\nvar Transaction = /** @class */function () {\n  /**\n   * @constructor\n   * @param {ConnectionHolder} connectionHolder - the connection holder to get connection from.\n   * @param {function()} onClose - Function to be called when transaction is committed or rolled back.\n   * @param {function(bookmark: Bookmark)} onBookmark callback invoked when new bookmark is produced.\n   * * @param {function()} onConnection - Function to be called when a connection is obtained to ensure the conneciton\n   * is not yet released.\n   * @param {boolean} reactive whether this transaction generates reactive streams\n   * @param {number} fetchSize - the record fetch size in each pulling batch.\n   * @param {string} impersonatedUser - The name of the user which should be impersonated for the duration of the session.\n   */\n  function Transaction(_a) {\n    var connectionHolder = _a.connectionHolder,\n      onClose = _a.onClose,\n      onBookmark = _a.onBookmark,\n      onConnection = _a.onConnection,\n      reactive = _a.reactive,\n      fetchSize = _a.fetchSize,\n      impersonatedUser = _a.impersonatedUser;\n    this._connectionHolder = connectionHolder;\n    this._reactive = reactive;\n    this._state = _states.ACTIVE;\n    this._onClose = onClose;\n    this._onBookmark = onBookmark;\n    this._onConnection = onConnection;\n    this._onError = this._onErrorCallback.bind(this);\n    this._onComplete = this._onCompleteCallback.bind(this);\n    this._fetchSize = fetchSize;\n    this._results = [];\n    this._impersonatedUser = impersonatedUser;\n  }\n  /**\n   * @private\n   * @param {Bookmark | string |  string []} bookmark\n   * @param {TxConfig} txConfig\n   * @returns {void}\n   */\n  Transaction.prototype._begin = function (bookmark, txConfig) {\n    var _this = this;\n    this._connectionHolder.getConnection().then(function (connection) {\n      _this._onConnection();\n      if (connection) {\n        return connection.protocol().beginTransaction({\n          bookmark: bookmark,\n          txConfig: txConfig,\n          mode: _this._connectionHolder.mode(),\n          database: _this._connectionHolder.database(),\n          impersonatedUser: _this._impersonatedUser,\n          beforeError: _this._onError,\n          afterComplete: _this._onComplete\n        });\n      } else {\n        throw (0, error_1.newError)('No connection available');\n      }\n    }).catch(function (error) {\n      return _this._onError(error);\n    });\n  };\n  /**\n   * Run Cypher query\n   * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n   * or with the query and parameters as separate arguments.\n   * @param {mixed} query - Cypher query to execute\n   * @param {Object} parameters - Map with parameters to use in query\n   * @return {Result} New Result\n   */\n  Transaction.prototype.run = function (query, parameters) {\n    var _a = (0, util_1.validateQueryAndParameters)(query, parameters),\n      validatedQuery = _a.validatedQuery,\n      params = _a.params;\n    var result = this._state.run(validatedQuery, params, {\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      reactive: this._reactive,\n      fetchSize: this._fetchSize\n    });\n    this._results.push(result);\n    return result;\n  };\n  /**\n   * Commits the transaction and returns the result.\n   *\n   * After committing the transaction can no longer be used.\n   *\n   * @returns {Promise<void>} An empty promise if committed successfully or error if any error happened during commit.\n   */\n  Transaction.prototype.commit = function () {\n    var committed = this._state.commit({\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      pendingResults: this._results\n    });\n    this._state = committed.state;\n    // clean up\n    this._onClose();\n    return new Promise(function (resolve, reject) {\n      committed.result.subscribe({\n        onCompleted: function onCompleted() {\n          return resolve();\n        },\n        onError: function onError(error) {\n          return reject(error);\n        }\n      });\n    });\n  };\n  /**\n   * Rollbacks the transaction.\n   *\n   * After rolling back, the transaction can no longer be used.\n   *\n   * @returns {Promise<void>} An empty promise if rolled back successfully or error if any error happened during\n   * rollback.\n   */\n  Transaction.prototype.rollback = function () {\n    var rolledback = this._state.rollback({\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      pendingResults: this._results\n    });\n    this._state = rolledback.state;\n    // clean up\n    this._onClose();\n    return new Promise(function (resolve, reject) {\n      rolledback.result.subscribe({\n        onCompleted: function onCompleted() {\n          return resolve();\n        },\n        onError: function onError(error) {\n          return reject(error);\n        }\n      });\n    });\n  };\n  /**\n   * Check if this transaction is active, which means commit and rollback did not happen.\n   * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n   */\n  Transaction.prototype.isOpen = function () {\n    return this._state === _states.ACTIVE;\n  };\n  /**\n   * Closes the transaction\n   *\n   * This method will roll back the transaction if it is not already committed or rolled back.\n   *\n   * @returns {Promise<void>} An empty promise if closed successfully or error if any error happened during\n   */\n  Transaction.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isOpen()) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.rollback()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Transaction.prototype._onErrorCallback = function (err) {\n    // error will be \"acknowledged\" by sending a RESET message\n    // database will then forget about this transaction and cleanup all corresponding resources\n    // it is thus safe to move this transaction to a FAILED state and disallow any further interactions with it\n    this._state = _states.FAILED;\n    this._onClose();\n    // release connection back to the pool\n    return this._connectionHolder.releaseConnection();\n  };\n  /**\n   * @private\n   * @param {object} meta The meta with bookmark\n   * @returns {void}\n   */\n  Transaction.prototype._onCompleteCallback = function (meta) {\n    this._onBookmark(new bookmark_1.Bookmark(meta.bookmark));\n  };\n  return Transaction;\n}();\nvar _states = {\n  // The transaction is running with no explicit success or failure marked\n  ACTIVE: {\n    commit: function commit(_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete,\n        onConnection = _a.onConnection,\n        pendingResults = _a.pendingResults;\n      return {\n        result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults),\n        state: _states.SUCCEEDED\n      };\n    },\n    rollback: function rollback(_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete,\n        onConnection = _a.onConnection,\n        pendingResults = _a.pendingResults;\n      return {\n        result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults),\n        state: _states.ROLLED_BACK\n      };\n    },\n    run: function run(query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete,\n        onConnection = _a.onConnection,\n        reactive = _a.reactive,\n        fetchSize = _a.fetchSize;\n      // RUN in explicit transaction can't contain bookmarks and transaction configuration\n      // No need to include mode and database name as it shall be inclued in begin\n      var observerPromise = connectionHolder.getConnection().then(function (conn) {\n        onConnection();\n        if (conn) {\n          return conn.protocol().run(query, parameters, {\n            bookmark: bookmark_1.Bookmark.empty(),\n            txConfig: tx_config_1.TxConfig.empty(),\n            beforeError: onError,\n            afterComplete: onComplete,\n            reactive: reactive,\n            fetchSize: fetchSize\n          });\n        } else {\n          throw (0, error_1.newError)('No connection available');\n        }\n      }).catch(function (error) {\n        return new observers_1.FailedObserver({\n          error: error,\n          onError: onError\n        });\n      });\n      return newCompletedResult(observerPromise, query, parameters, connectionHolder);\n    }\n  },\n  // An error has occurred, transaction can no longer be used and no more messages will\n  // be sent for this transaction.\n  FAILED: {\n    commit: function commit(_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.'),\n          onError: onError\n        }), 'COMMIT', {}, connectionHolder),\n        state: _states.FAILED\n      };\n    },\n    rollback: function rollback(_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.CompletedObserver(), 'ROLLBACK', {}, connectionHolder),\n        state: _states.FAILED\n      };\n    },\n    run: function run(query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.'),\n        onError: onError\n      }), query, parameters, connectionHolder);\n    }\n  },\n  // This transaction has successfully committed\n  SUCCEEDED: {\n    commit: function commit(_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has already been committed.'),\n          onError: onError\n        }), 'COMMIT', {}),\n        state: _states.SUCCEEDED,\n        connectionHolder: connectionHolder\n      };\n    },\n    rollback: function rollback(_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been committed.'),\n          onError: onError\n        }), 'ROLLBACK', {}),\n        state: _states.SUCCEEDED,\n        connectionHolder: connectionHolder\n      };\n    },\n    run: function run(query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been committed.'),\n        onError: onError\n      }), query, parameters, connectionHolder);\n    }\n  },\n  // This transaction has been rolled back\n  ROLLED_BACK: {\n    commit: function commit(_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has already been rolled back.'),\n          onError: onError\n        }), 'COMMIT', {}, connectionHolder),\n        state: _states.ROLLED_BACK\n      };\n    },\n    rollback: function rollback(_a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been rolled back.')\n        }), 'ROLLBACK', {}, connectionHolder),\n        state: _states.ROLLED_BACK\n      };\n    },\n    run: function run(query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n        onError = _a.onError,\n        onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been rolled back.'),\n        onError: onError\n      }), query, parameters, connectionHolder);\n    }\n  }\n};\n/**\n *\n * @param {boolean} commit\n * @param {ConnectionHolder} connectionHolder\n * @param {function(err:Error): any} onError\n * @param {function(metadata:object): any} onComplete\n * @param {function() : any} onConnection\n * @param {list<Result>>}pendingResults all run results in this transaction\n */\nfunction finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults) {\n  var observerPromise = connectionHolder.getConnection().then(function (connection) {\n    onConnection();\n    pendingResults.forEach(function (r) {\n      return r._cancel();\n    });\n    return Promise.all(pendingResults).then(function (results) {\n      if (connection) {\n        if (commit) {\n          return connection.protocol().commitTransaction({\n            beforeError: onError,\n            afterComplete: onComplete\n          });\n        } else {\n          return connection.protocol().rollbackTransaction({\n            beforeError: onError,\n            afterComplete: onComplete\n          });\n        }\n      } else {\n        throw (0, error_1.newError)('No connection available');\n      }\n    });\n  }).catch(function (error) {\n    return new observers_1.FailedObserver({\n      error: error,\n      onError: onError\n    });\n  });\n  // for commit & rollback we need result that uses real connection holder and notifies it when\n  // connection is not needed and can be safely released to the pool\n  return new result_1.default(observerPromise, commit ? 'COMMIT' : 'ROLLBACK', {}, connectionHolder);\n}\n/**\n * Creates a {@link Result} with empty connection holder.\n * For cases when result represents an intermediate or failed action, does not require any metadata and does not\n * need to influence real connection holder to release connections.\n * @param {ResultStreamObserver} observer - an observer for the created result.\n * @param {string} query - the cypher query that produced the result.\n * @param {Object} parameters - the parameters for cypher query that produced the result.\n * @param {ConnectionHolder} connectionHolder - the connection holder used to get the result\n * @return {Result} new result.\n * @private\n */\nfunction newCompletedResult(observerPromise, query, parameters, connectionHolder) {\n  if (connectionHolder === void 0) {\n    connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER;\n  }\n  return new result_1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1.ReadOnlyConnectionHolder(connectionHolder || connection_holder_1.EMPTY_CONNECTION_HOLDER));\n}\nexports.default = Transaction;","map":null,"metadata":{},"sourceType":"script"}