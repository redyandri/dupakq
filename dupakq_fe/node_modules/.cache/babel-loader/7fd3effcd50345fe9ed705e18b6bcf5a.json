{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _rxjs = require(\"rxjs\");\nvar _operators = require(\"rxjs/operators\");\nvar _resultRx = _interopRequireDefault(require(\"./result-rx\"));\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\nvar _transactionRx = _interopRequireDefault(require(\"./transaction-rx\"));\nvar _retryLogicRx = _interopRequireDefault(require(\"./internal/retry-logic-rx\"));\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _internal$constants = _neo4jDriverCore.internal.constants,\n  ACCESS_MODE_READ = _internal$constants.ACCESS_MODE_READ,\n  ACCESS_MODE_WRITE = _internal$constants.ACCESS_MODE_WRITE,\n  TxConfig = _neo4jDriverCore.internal.txConfig.TxConfig;\n/**\n * A Reactive session, which provides the same functionality as {@link Session} but through a Reactive API.\n */\n\nvar RxSession = /*#__PURE__*/function () {\n  /**\n   * Constructs a reactive session with given default session instance and provided driver configuration.\n   *\n   * @protected\n   * @param {Object} param - Object parameter\n   * @param {Session} param.session - The underlying session instance to relay requests\n   */\n  function RxSession() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      session = _ref.session,\n      config = _ref.config;\n    (0, _classCallCheck2[\"default\"])(this, RxSession);\n    this._session = session;\n    this._retryLogic = _createRetryLogic(config);\n  }\n  /**\n   * Creates a reactive result that will execute the  query with the provided parameters and the provided\n   * transaction configuration that applies to the underlying auto-commit transaction.\n   *\n   * @public\n   * @param {string} query - Query to be executed.\n   * @param {Object} parameters - Parameter values to use in query execution.\n   * @param {TransactionConfig} transactionConfig - Configuration for the new auto-commit transaction.\n   * @returns {RxResult} - A reactive result\n   */\n\n  (0, _createClass2[\"default\"])(RxSession, [{\n    key: \"run\",\n    value: function run(query, parameters, transactionConfig) {\n      var _this = this;\n      return new _resultRx[\"default\"](new _rxjs.Observable(function (observer) {\n        try {\n          observer.next(_this._session.run(query, parameters, transactionConfig));\n          observer.complete();\n        } catch (err) {\n          observer.error(err);\n        }\n        return function () {};\n      }));\n    }\n    /**\n     * Starts a new explicit transaction with the provided transaction configuration.\n     *\n     * @public\n     * @param {TransactionConfig} transactionConfig - Configuration for the new transaction.\n     * @returns {Observable<RxTransaction>} - A reactive stream that will generate at most **one** RxTransaction instance.\n     */\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction(transactionConfig) {\n      return this._beginTransaction(this._session._mode, transactionConfig);\n    }\n    /**\n     * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n  }, {\n    key: \"readTransaction\",\n    value: function readTransaction(work, transactionConfig) {\n      return this._runTransaction(ACCESS_MODE_READ, work, transactionConfig);\n    }\n    /**\n     * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n  }, {\n    key: \"writeTransaction\",\n    value: function writeTransaction(work, transactionConfig) {\n      return this._runTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n    }\n    /**\n     * Closes this reactive session.\n     *\n     * @public\n     * @returns {Observable} - An empty reactive stream\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n      return new _rxjs.Observable(function (observer) {\n        _this2._session.close().then(function () {\n          observer.complete();\n        })[\"catch\"](function (err) {\n          return observer.error(err);\n        });\n      });\n    }\n    /**\n     * Returns the bookmark received following the last successfully completed query, which is executed\n     * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n     * the {@link RxSession#run} method of this session instance.\n     *\n     * If no bookmark was received or if this transaction was rolled back, the bookmark value will not be\n     * changed.\n     *\n     * @public\n     * @returns {string}\n     */\n  }, {\n    key: \"lastBookmark\",\n    value: function lastBookmark() {\n      return this._session.lastBookmark();\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"_beginTransaction\",\n    value: function _beginTransaction(accessMode, transactionConfig) {\n      var _this3 = this;\n      var txConfig = TxConfig.empty();\n      if (transactionConfig) {\n        txConfig = new TxConfig(transactionConfig);\n      }\n      return new _rxjs.Observable(function (observer) {\n        try {\n          observer.next(new _transactionRx[\"default\"](_this3._session._beginTransaction(accessMode, txConfig)));\n          observer.complete();\n        } catch (err) {\n          observer.error(err);\n        }\n        return function () {};\n      });\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"_runTransaction\",\n    value: function _runTransaction(accessMode, work, transactionConfig) {\n      var txConfig = TxConfig.empty();\n      if (transactionConfig) {\n        txConfig = new TxConfig(transactionConfig);\n      }\n      return this._retryLogic.retry(this._beginTransaction(accessMode, transactionConfig).pipe((0, _operators.flatMap)(function (txc) {\n        return (0, _rxjs.defer)(function () {\n          try {\n            return work(txc);\n          } catch (err) {\n            return (0, _rxjs.throwError)(err);\n          }\n        }).pipe((0, _operators.catchError)(function (err) {\n          return txc.rollback().pipe((0, _operators.concat)((0, _rxjs.throwError)(err)));\n        }), (0, _operators.concat)(txc.commit()));\n      })));\n    }\n  }]);\n  return RxSession;\n}();\nexports[\"default\"] = RxSession;\nfunction _createRetryLogic(config) {\n  var maxRetryTimeout = config && config.maxTransactionRetryTime ? config.maxTransactionRetryTime : null;\n  return new _retryLogicRx[\"default\"]({\n    maxRetryTimeout: maxRetryTimeout\n  });\n}","map":null,"metadata":{},"sourceType":"script"}