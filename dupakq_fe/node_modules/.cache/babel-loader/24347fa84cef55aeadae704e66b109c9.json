{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProcedureRouteObserver = exports.RouteObserver = exports.CompletedObserver = exports.FailedObserver = exports.ResetObserver = exports.LoginObserver = exports.ResultStreamObserver = exports.StreamObserver = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar routing_table_raw_1 = __importDefault(require(\"./routing-table-raw\"));\nvar FETCH_ALL = neo4j_driver_core_1.internal.constants.FETCH_ALL;\nvar PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;\nvar StreamObserver = /** @class */function () {\n  function StreamObserver() {}\n  StreamObserver.prototype.onNext = function (rawRecord) {};\n  StreamObserver.prototype.onError = function (error) {};\n  StreamObserver.prototype.onCompleted = function (meta) {};\n  return StreamObserver;\n}();\nexports.StreamObserver = StreamObserver;\n/**\n * Handles a RUN/PULL_ALL, or RUN/DISCARD_ALL requests, maps the responses\n * in a way that a user-provided observer can see these as a clean Stream\n * of records.\n * This class will queue up incoming messages until a user-provided observer\n * for the incoming stream is registered. Thus, we keep fields around\n * for tracking head/records/tail. These are only used if there is no\n * observer registered.\n * @access private\n */\nvar ResultStreamObserver = /** @class */function (_super) {\n  __extends(ResultStreamObserver, _super);\n  /**\n   *\n   * @param {Object} param\n   * @param {Object} param.server\n   * @param {boolean} param.reactive\n   * @param {function(stmtId: number|Integer, n: number|Integer, observer: StreamObserver)} param.moreFunction -\n   * @param {function(stmtId: number|Integer, observer: StreamObserver)} param.discardFunction -\n   * @param {number|Integer} param.fetchSize -\n   * @param {function(err: Error): Promise|void} param.beforeError -\n   * @param {function(err: Error): Promise|void} param.afterError -\n   * @param {function(keys: string[]): Promise|void} param.beforeKeys -\n   * @param {function(keys: string[]): Promise|void} param.afterKeys -\n   * @param {function(metadata: Object): Promise|void} param.beforeComplete -\n   * @param {function(metadata: Object): Promise|void} param.afterComplete -\n   */\n  function ResultStreamObserver(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.reactive,\n      reactive = _c === void 0 ? false : _c,\n      moreFunction = _b.moreFunction,\n      discardFunction = _b.discardFunction,\n      _d = _b.fetchSize,\n      fetchSize = _d === void 0 ? FETCH_ALL : _d,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeKeys = _b.beforeKeys,\n      afterKeys = _b.afterKeys,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete,\n      server = _b.server;\n    var _this = _super.call(this) || this;\n    _this._fieldKeys = null;\n    _this._fieldLookup = null;\n    _this._head = null;\n    _this._queuedRecords = [];\n    _this._tail = null;\n    _this._error = null;\n    _this._observers = [];\n    _this._meta = {};\n    _this._server = server;\n    _this._beforeError = beforeError;\n    _this._afterError = afterError;\n    _this._beforeKeys = beforeKeys;\n    _this._afterKeys = afterKeys;\n    _this._beforeComplete = beforeComplete;\n    _this._afterComplete = afterComplete;\n    _this._queryId = null;\n    _this._moreFunction = moreFunction;\n    _this._discardFunction = discardFunction;\n    _this._discard = false;\n    _this._fetchSize = fetchSize;\n    _this._setState(reactive ? _states.READY : _states.READY_STREAMING);\n    _this._setupAuoPull(fetchSize);\n    return _this;\n  }\n  /**\n   * Will be called on every record that comes in and transform a raw record\n   * to a Object. If user-provided observer is present, pass transformed record\n   * to it's onNext method, otherwise, push to record que.\n   * @param {Array} rawRecord - An array with the raw record\n   */\n  ResultStreamObserver.prototype.onNext = function (rawRecord) {\n    var record = new neo4j_driver_core_1.Record(this._fieldKeys, rawRecord, this._fieldLookup);\n    if (this._observers.some(function (o) {\n      return o.onNext;\n    })) {\n      this._observers.forEach(function (o) {\n        if (o.onNext) {\n          o.onNext(record);\n        }\n      });\n    } else {\n      this._queuedRecords.push(record);\n      if (this._queuedRecords.length > this._highRecordWatermark) {\n        this._autoPull = false;\n      }\n    }\n  };\n  ResultStreamObserver.prototype.onCompleted = function (meta) {\n    this._state.onSuccess(this, meta);\n  };\n  /**\n   * Will be called on errors.\n   * If user-provided observer is present, pass the error\n   * to it's onError method, otherwise set instance variable _error.\n   * @param {Object} error - An error object\n   */\n  ResultStreamObserver.prototype.onError = function (error) {\n    this._state.onError(this, error);\n  };\n  /**\n   * Cancel pending record stream\n   */\n  ResultStreamObserver.prototype.cancel = function () {\n    this._discard = true;\n  };\n  /**\n   * Stream observer defaults to handling responses for two messages: RUN + PULL_ALL or RUN + DISCARD_ALL.\n   * Response for RUN initializes query keys. Response for PULL_ALL / DISCARD_ALL exposes the result stream.\n   *\n   * However, some operations can be represented as a single message which receives full metadata in a single response.\n   * For example, operations to begin, commit and rollback an explicit transaction use two messages in Bolt V1 but a single message in Bolt V3.\n   * Messages are `RUN \"BEGIN\" {}` + `PULL_ALL` in Bolt V1 and `BEGIN` in Bolt V3.\n   *\n   * This function prepares the observer to only handle a single response message.\n   */\n  ResultStreamObserver.prototype.prepareToHandleSingleResponse = function () {\n    this._head = [];\n    this._fieldKeys = [];\n    this._setState(_states.STREAMING);\n  };\n  /**\n   * Mark this observer as if it has completed with no metadata.\n   */\n  ResultStreamObserver.prototype.markCompleted = function () {\n    this._head = [];\n    this._fieldKeys = [];\n    this._tail = {};\n    this._setState(_states.SUCCEEDED);\n  };\n  /**\n   * Subscribe to events with provided observer.\n   * @param {Object} observer - Observer object\n   * @param {function(keys: String[])} observer.onKeys - Handle stream header, field keys.\n   * @param {function(record: Object)} observer.onNext - Handle records, one by one.\n   * @param {function(metadata: Object)} observer.onCompleted - Handle stream tail, the metadata.\n   * @param {function(error: Object)} observer.onError - Handle errors, should always be provided.\n   */\n  ResultStreamObserver.prototype.subscribe = function (observer) {\n    if (this._error) {\n      observer.onError(this._error);\n      return;\n    }\n    if (this._head && observer.onKeys) {\n      observer.onKeys(this._head);\n    }\n    if (this._queuedRecords.length > 0 && observer.onNext) {\n      for (var i = 0; i < this._queuedRecords.length; i++) {\n        observer.onNext(this._queuedRecords[i]);\n        if (this._queuedRecords.length - i - 1 <= this._lowRecordWatermark) {\n          this._autoPull = true;\n          if (this._state === _states.READY) {\n            this._handleStreaming();\n          }\n        }\n      }\n    }\n    if (this._tail && observer.onCompleted) {\n      observer.onCompleted(this._tail);\n    }\n    this._observers.push(observer);\n    if (this._state === _states.READY) {\n      this._handleStreaming();\n    }\n  };\n  ResultStreamObserver.prototype._handleHasMore = function (meta) {\n    // We've consumed current batch and server notified us that there're more\n    // records to stream. Let's invoke more or discard function based on whether\n    // the user wants to discard streaming or not\n    this._setState(_states.READY); // we've done streaming\n    this._handleStreaming();\n    delete meta.has_more;\n  };\n  ResultStreamObserver.prototype._handlePullSuccess = function (meta) {\n    var _this = this;\n    this._setState(_states.SUCCEEDED);\n    var completionMetadata = Object.assign(this._server ? {\n      server: this._server\n    } : {}, this._meta, meta);\n    var beforeHandlerResult = null;\n    if (this._beforeComplete) {\n      beforeHandlerResult = this._beforeComplete(completionMetadata);\n    }\n    var continuation = function continuation() {\n      // End of stream\n      _this._tail = completionMetadata;\n      if (_this._observers.some(function (o) {\n        return o.onCompleted;\n      })) {\n        _this._observers.forEach(function (o) {\n          if (o.onCompleted) {\n            o.onCompleted(completionMetadata);\n          }\n        });\n      }\n      if (_this._afterComplete) {\n        _this._afterComplete(completionMetadata);\n      }\n    };\n    if (beforeHandlerResult) {\n      Promise.resolve(beforeHandlerResult).then(function () {\n        return continuation();\n      });\n    } else {\n      continuation();\n    }\n  };\n  ResultStreamObserver.prototype._handleRunSuccess = function (meta, afterSuccess) {\n    var _this = this;\n    if (this._fieldKeys === null) {\n      // Stream header, build a name->index field lookup table\n      // to be used by records. This is an optimization to make it\n      // faster to look up fields in a record by name, rather than by index.\n      // Since the records we get back via Bolt are just arrays of values.\n      this._fieldKeys = [];\n      this._fieldLookup = {};\n      if (meta.fields && meta.fields.length > 0) {\n        this._fieldKeys = meta.fields;\n        for (var i = 0; i < meta.fields.length; i++) {\n          this._fieldLookup[meta.fields[i]] = i;\n        }\n        // remove fields key from metadata object\n        delete meta.fields;\n      }\n      // Extract server generated query id for use in requestMore and discard\n      // functions\n      if (meta.qid !== null && meta.qid !== undefined) {\n        this._queryId = meta.qid;\n        // remove qid from metadata object\n        delete meta.qid;\n      }\n      this._storeMetadataForCompletion(meta);\n      var beforeHandlerResult = null;\n      if (this._beforeKeys) {\n        beforeHandlerResult = this._beforeKeys(this._fieldKeys);\n      }\n      var continuation_1 = function continuation_1() {\n        _this._head = _this._fieldKeys;\n        if (_this._observers.some(function (o) {\n          return o.onKeys;\n        })) {\n          _this._observers.forEach(function (o) {\n            if (o.onKeys) {\n              o.onKeys(_this._fieldKeys);\n            }\n          });\n        }\n        if (_this._afterKeys) {\n          _this._afterKeys(_this._fieldKeys);\n        }\n        afterSuccess();\n      };\n      if (beforeHandlerResult) {\n        Promise.resolve(beforeHandlerResult).then(function () {\n          return continuation_1();\n        });\n      } else {\n        continuation_1();\n      }\n    }\n  };\n  ResultStreamObserver.prototype._handleError = function (error) {\n    var _this = this;\n    this._setState(_states.FAILED);\n    this._error = error;\n    var beforeHandlerResult = null;\n    if (this._beforeError) {\n      beforeHandlerResult = this._beforeError(error);\n    }\n    var continuation = function continuation() {\n      if (_this._observers.some(function (o) {\n        return o.onError;\n      })) {\n        _this._observers.forEach(function (o) {\n          if (o.onError) {\n            o.onError(error);\n          }\n        });\n      }\n      if (_this._afterError) {\n        _this._afterError(error);\n      }\n    };\n    if (beforeHandlerResult) {\n      Promise.resolve(beforeHandlerResult).then(function () {\n        return continuation();\n      });\n    } else {\n      continuation();\n    }\n  };\n  ResultStreamObserver.prototype._handleStreaming = function () {\n    if (this._head && this._observers.some(function (o) {\n      return o.onNext || o.onCompleted;\n    })) {\n      if (this._discard) {\n        this._discardFunction(this._queryId, this);\n        this._setState(_states.STREAMING);\n      } else if (this._autoPull) {\n        this._moreFunction(this._queryId, this._fetchSize, this);\n        this._setState(_states.STREAMING);\n      }\n    }\n  };\n  ResultStreamObserver.prototype._storeMetadataForCompletion = function (meta) {\n    var keys = Object.keys(meta);\n    var index = keys.length;\n    var key = '';\n    while (index--) {\n      key = keys[index];\n      this._meta[key] = meta[key];\n    }\n  };\n  ResultStreamObserver.prototype._setState = function (state) {\n    this._state = state;\n  };\n  ResultStreamObserver.prototype._setupAuoPull = function (fetchSize) {\n    this._autoPull = true;\n    if (fetchSize === FETCH_ALL) {\n      this._lowRecordWatermark = Number.MAX_VALUE; // we shall always lower than this number to enable auto pull\n      this._highRecordWatermark = Number.MAX_VALUE; // we shall never reach this number to disable auto pull\n    } else {\n      this._lowRecordWatermark = 0.3 * fetchSize;\n      this._highRecordWatermark = 0.7 * fetchSize;\n    }\n  };\n  return ResultStreamObserver;\n}(StreamObserver);\nexports.ResultStreamObserver = ResultStreamObserver;\nvar LoginObserver = /** @class */function (_super) {\n  __extends(LoginObserver, _super);\n  /**\n   *\n   * @param {Object} param -\n   * @param {function(err: Error)} param.onError\n   * @param {function(metadata)} param.onCompleted\n   */\n  function LoginObserver(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      onError = _b.onError,\n      onCompleted = _b.onCompleted;\n    var _this = _super.call(this) || this;\n    _this._onError = onError;\n    _this._onCompleted = onCompleted;\n    return _this;\n  }\n  LoginObserver.prototype.onNext = function (record) {\n    this.onError((0, neo4j_driver_core_1.newError)('Received RECORD when initializing ' + neo4j_driver_core_1.json.stringify(record)));\n  };\n  LoginObserver.prototype.onError = function (error) {\n    if (this._onError) {\n      this._onError(error);\n    }\n  };\n  LoginObserver.prototype.onCompleted = function (metadata) {\n    if (this._onCompleted) {\n      this._onCompleted(metadata);\n    }\n  };\n  return LoginObserver;\n}(StreamObserver);\nexports.LoginObserver = LoginObserver;\nvar ResetObserver = /** @class */function (_super) {\n  __extends(ResetObserver, _super);\n  /**\n   *\n   * @param {Object} param -\n   * @param {function(err: String)} param.onProtocolError\n   * @param {function(err: Error)} param.onError\n   * @param {function(metadata)} param.onComplete\n   */\n  function ResetObserver(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      onProtocolError = _b.onProtocolError,\n      onError = _b.onError,\n      onComplete = _b.onComplete;\n    var _this = _super.call(this) || this;\n    _this._onProtocolError = onProtocolError;\n    _this._onError = onError;\n    _this._onComplete = onComplete;\n    return _this;\n  }\n  ResetObserver.prototype.onNext = function (record) {\n    this.onError((0, neo4j_driver_core_1.newError)('Received RECORD when resetting: received record is: ' + neo4j_driver_core_1.json.stringify(record), PROTOCOL_ERROR));\n  };\n  ResetObserver.prototype.onError = function (error) {\n    if (error.code === PROTOCOL_ERROR && this._onProtocolError) {\n      this._onProtocolError(error.message);\n    }\n    if (this._onError) {\n      this._onError(error);\n    }\n  };\n  ResetObserver.prototype.onCompleted = function (metadata) {\n    if (this._onComplete) {\n      this._onComplete(metadata);\n    }\n  };\n  return ResetObserver;\n}(StreamObserver);\nexports.ResetObserver = ResetObserver;\nvar FailedObserver = /** @class */function (_super) {\n  __extends(FailedObserver, _super);\n  function FailedObserver(_a) {\n    var error = _a.error,\n      onError = _a.onError;\n    var _this = _super.call(this, {\n      beforeError: onError\n    }) || this;\n    _this.onError(error);\n    return _this;\n  }\n  return FailedObserver;\n}(ResultStreamObserver);\nexports.FailedObserver = FailedObserver;\nvar CompletedObserver = /** @class */function (_super) {\n  __extends(CompletedObserver, _super);\n  function CompletedObserver() {\n    var _this = _super.call(this) || this;\n    _super.prototype.markCompleted.call(_this);\n    return _this;\n  }\n  return CompletedObserver;\n}(ResultStreamObserver);\nexports.CompletedObserver = CompletedObserver;\nvar ProcedureRouteObserver = /** @class */function (_super) {\n  __extends(ProcedureRouteObserver, _super);\n  function ProcedureRouteObserver(_a) {\n    var resultObserver = _a.resultObserver,\n      onProtocolError = _a.onProtocolError,\n      onError = _a.onError,\n      onCompleted = _a.onCompleted;\n    var _this = _super.call(this) || this;\n    _this._resultObserver = resultObserver;\n    _this._onError = onError;\n    _this._onCompleted = onCompleted;\n    _this._records = [];\n    _this._onProtocolError = onProtocolError;\n    resultObserver.subscribe(_this);\n    return _this;\n  }\n  ProcedureRouteObserver.prototype.onNext = function (record) {\n    this._records.push(record);\n  };\n  ProcedureRouteObserver.prototype.onError = function (error) {\n    if (error.code === PROTOCOL_ERROR && this._onProtocolError) {\n      this._onProtocolError(error.message);\n    }\n    if (this._onError) {\n      this._onError(error);\n    }\n  };\n  ProcedureRouteObserver.prototype.onCompleted = function () {\n    if (this._records !== null && this._records.length !== 1) {\n      this.onError((0, neo4j_driver_core_1.newError)('Illegal response from router. Received ' + this._records.length + ' records but expected only one.\\n' + neo4j_driver_core_1.json.stringify(this._records), PROTOCOL_ERROR));\n      return;\n    }\n    if (this._onCompleted) {\n      this._onCompleted(routing_table_raw_1.default.ofRecord(this._records[0]));\n    }\n  };\n  return ProcedureRouteObserver;\n}(StreamObserver);\nexports.ProcedureRouteObserver = ProcedureRouteObserver;\nvar RouteObserver = /** @class */function (_super) {\n  __extends(RouteObserver, _super);\n  /**\n   *\n   * @param {Object} param -\n   * @param {function(err: String)} param.onProtocolError\n   * @param {function(err: Error)} param.onError\n   * @param {function(RawRoutingTable)} param.onCompleted\n   */\n  function RouteObserver(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      onProtocolError = _b.onProtocolError,\n      onError = _b.onError,\n      onCompleted = _b.onCompleted;\n    var _this = _super.call(this) || this;\n    _this._onProtocolError = onProtocolError;\n    _this._onError = onError;\n    _this._onCompleted = onCompleted;\n    return _this;\n  }\n  RouteObserver.prototype.onNext = function (record) {\n    this.onError((0, neo4j_driver_core_1.newError)('Received RECORD when resetting: received record is: ' + neo4j_driver_core_1.json.stringify(record), PROTOCOL_ERROR));\n  };\n  RouteObserver.prototype.onError = function (error) {\n    if (error.code === PROTOCOL_ERROR && this._onProtocolError) {\n      this._onProtocolError(error.message);\n    }\n    if (this._onError) {\n      this._onError(error);\n    }\n  };\n  RouteObserver.prototype.onCompleted = function (metadata) {\n    if (this._onCompleted) {\n      this._onCompleted(routing_table_raw_1.default.ofMessageResponse(metadata));\n    }\n  };\n  return RouteObserver;\n}(StreamObserver);\nexports.RouteObserver = RouteObserver;\nvar _states = {\n  READY_STREAMING: {\n    // async start state\n    onSuccess: function onSuccess(streamObserver, meta) {\n      streamObserver._handleRunSuccess(meta, function () {\n        streamObserver._setState(_states.STREAMING);\n      } // after run succeeded, async directly move to streaming\n      // state\n      );\n    },\n\n    onError: function onError(streamObserver, error) {\n      streamObserver._handleError(error);\n    },\n    name: function name() {\n      return 'READY_STREAMING';\n    }\n  },\n  READY: {\n    // reactive start state\n    onSuccess: function onSuccess(streamObserver, meta) {\n      streamObserver._handleRunSuccess(meta, function () {\n        return streamObserver._handleStreaming();\n      } // after run succeeded received, reactive shall start pulling\n      );\n    },\n\n    onError: function onError(streamObserver, error) {\n      streamObserver._handleError(error);\n    },\n    name: function name() {\n      return 'READY';\n    }\n  },\n  STREAMING: {\n    onSuccess: function onSuccess(streamObserver, meta) {\n      if (meta.has_more) {\n        streamObserver._handleHasMore(meta);\n      } else {\n        streamObserver._handlePullSuccess(meta);\n      }\n    },\n    onError: function onError(streamObserver, error) {\n      streamObserver._handleError(error);\n    },\n    name: function name() {\n      return 'STREAMING';\n    }\n  },\n  FAILED: {\n    onError: function onError(error) {\n      // more errors are ignored\n    },\n    name: function name() {\n      return 'FAILED';\n    }\n  },\n  SUCCEEDED: {\n    name: function name() {\n      return 'SUCCEEDED';\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}