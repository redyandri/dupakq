{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.util,\n  ENCRYPTION_OFF = _a.ENCRYPTION_OFF,\n  ENCRYPTION_ON = _a.ENCRYPTION_ON;\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;\nvar DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default\nvar ALLOWED_VALUES_ENCRYPTED = [null, undefined, true, false, ENCRYPTION_ON, ENCRYPTION_OFF];\nvar ALLOWED_VALUES_TRUST = [null, undefined, 'TRUST_ALL_CERTIFICATES', 'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES', 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'];\nvar ChannelConfig = /** @class */function () {\n  /**\n   * @constructor\n   * @param {ServerAddress} address the address for the channel to connect to.\n   * @param {Object} driverConfig the driver config provided by the user when driver is created.\n   * @param {string} connectionErrorCode the default error code to use on connection errors.\n   */\n  function ChannelConfig(address, driverConfig, connectionErrorCode) {\n    this.address = address;\n    this.encrypted = extractEncrypted(driverConfig);\n    this.trust = extractTrust(driverConfig);\n    this.trustedCertificates = extractTrustedCertificates(driverConfig);\n    this.knownHostsPath = extractKnownHostsPath(driverConfig);\n    this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;\n    this.connectionTimeout = extractConnectionTimeout(driverConfig);\n  }\n  return ChannelConfig;\n}();\nexports.default = ChannelConfig;\nfunction extractEncrypted(driverConfig) {\n  var value = driverConfig.encrypted;\n  if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\n    throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the encrypted setting \" + value + \". Expected one of \" + ALLOWED_VALUES_ENCRYPTED);\n  }\n  return value;\n}\nfunction extractTrust(driverConfig) {\n  var value = driverConfig.trust;\n  if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\n    throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the trust setting \" + value + \". Expected one of \" + ALLOWED_VALUES_TRUST);\n  }\n  return value;\n}\nfunction extractTrustedCertificates(driverConfig) {\n  return driverConfig.trustedCertificates || [];\n}\nfunction extractKnownHostsPath(driverConfig) {\n  return driverConfig.knownHosts || null;\n}\nfunction extractConnectionTimeout(driverConfig) {\n  var configuredTimeout = parseInt(driverConfig.connectionTimeout, 10);\n  if (configuredTimeout === 0) {\n    // timeout explicitly configured to 0\n    return null;\n  } else if (configuredTimeout && configuredTimeout < 0) {\n    // timeout explicitly configured to a negative value\n    return null;\n  } else if (!configuredTimeout) {\n    // timeout not configured, use default value\n    return DEFAULT_CONNECTION_TIMEOUT_MILLIS;\n  } else {\n    // timeout configured, use the provided value\n    return configuredTimeout;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}