{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar channel_buf_1 = __importDefault(require(\"./channel-buf\"));\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar buffer_1 = __importDefault(require(\"buffer\"));\nvar string_decoder_1 = require(\"string_decoder\");\nvar decoder = new string_decoder_1.StringDecoder('utf8');\nfunction encode(str) {\n  return new channel_buf_1.default(newBuffer(str));\n}\nfunction decode(buffer, length) {\n  if (Object.prototype.hasOwnProperty.call(buffer, '_buffer')) {\n    return decodeChannelBuffer(buffer, length);\n  } else if (Object.prototype.hasOwnProperty.call(buffer, '_buffers')) {\n    return decodeCombinedBuffer(buffer, length);\n  } else {\n    throw (0, neo4j_driver_core_1.newError)(\"Don't know how to decode strings from '\" + buffer + \"'\");\n  }\n}\nfunction decodeChannelBuffer(buffer, length) {\n  var start = buffer.position;\n  var end = start + length;\n  buffer.position = Math.min(end, buffer.length);\n  return buffer._buffer.toString('utf8', start, end);\n}\nfunction decodeCombinedBuffer(buffer, length) {\n  return streamDecodeCombinedBuffer(buffer, length, function (partBuffer) {\n    return decoder.write(partBuffer._buffer);\n  }, function () {\n    return decoder.end();\n  });\n}\nfunction streamDecodeCombinedBuffer(combinedBuffers, length, decodeFn, endFn) {\n  var remainingBytesToRead = length;\n  var position = combinedBuffers.position;\n  combinedBuffers._updatePos(Math.min(length, combinedBuffers.length - position));\n  // Reduce CombinedBuffers to a decoded string\n  var out = combinedBuffers._buffers.reduce(function (last, partBuffer) {\n    if (remainingBytesToRead <= 0) {\n      return last;\n    } else if (position >= partBuffer.length) {\n      position -= partBuffer.length;\n      return '';\n    } else {\n      partBuffer._updatePos(position - partBuffer.position);\n      var bytesToRead = Math.min(partBuffer.length - position, remainingBytesToRead);\n      var lastSlice = partBuffer.readSlice(bytesToRead);\n      partBuffer._updatePos(bytesToRead);\n      remainingBytesToRead = Math.max(remainingBytesToRead - lastSlice.length, 0);\n      position = 0;\n      return last + decodeFn(lastSlice);\n    }\n  }, '');\n  return out + endFn();\n}\nfunction newBuffer(str) {\n  // use static factory function present in newer NodeJS versions to create a buffer containing the given string\n  // or fallback to the old, potentially deprecated constructor\n  if (typeof buffer_1.default.Buffer.from === 'function') {\n    return buffer_1.default.Buffer.from(str, 'utf8');\n  } else {\n    // eslint-disable-next-line node/no-deprecated-api\n    return new buffer_1.default.Buffer(str, 'utf8');\n  }\n}\nexports.default = {\n  encode: encode,\n  decode: decode\n};","map":null,"metadata":{},"sourceType":"script"}