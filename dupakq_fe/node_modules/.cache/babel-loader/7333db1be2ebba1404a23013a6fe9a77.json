{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPoint = exports.Point = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar util_1 = require(\"./internal/util\");\nvar POINT_IDENTIFIER_PROPERTY = '__isPoint__';\n/**\n * Represents a single two or three-dimensional point in a particular coordinate reference system.\n * Created `Point` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Point = /** @class */function () {\n  /**\n   * @constructor\n   * @param {T} srid - The coordinate reference system identifier.\n   * @param {number} x - The `x` coordinate of the point.\n   * @param {number} y - The `y` coordinate of the point.\n   * @param {number} [z=undefined] - The `z` coordinate of the point or `undefined` if point has 2 dimensions.\n   */\n  function Point(srid, x, y, z) {\n    /**\n     * The coordinate reference system identifier.\n     * @type {T}\n     */\n    this.srid = (0, util_1.assertNumberOrInteger)(srid, 'SRID');\n    /**\n     * The `x` coordinate of the point.\n     * @type {number}\n     */\n    this.x = (0, util_1.assertNumber)(x, 'X coordinate');\n    /**\n     * The `y` coordinate of the point.\n     * @type {number}\n     */\n    this.y = (0, util_1.assertNumber)(y, 'Y coordinate');\n    /**\n     * The `z` coordinate of the point or `undefined` if point is 2-dimensional.\n     * @type {number}\n     */\n    this.z = z === null || z === undefined ? z : (0, util_1.assertNumber)(z, 'Z coordinate');\n    Object.freeze(this);\n  }\n  /**\n   * @ignore\n   */\n  Point.prototype.toString = function () {\n    return this.z || this.z === 0 ? \"Point{srid=\" + formatAsFloat(this.srid) + \", x=\" + formatAsFloat(this.x) + \", y=\" + formatAsFloat(this.y) + \", z=\" + formatAsFloat(this.z) + \"}\" : \"Point{srid=\" + formatAsFloat(this.srid) + \", x=\" + formatAsFloat(this.x) + \", y=\" + formatAsFloat(this.y) + \"}\";\n  };\n  return Point;\n}();\nexports.Point = Point;\nfunction formatAsFloat(number) {\n  return Number.isInteger(number) ? number + '.0' : number.toString();\n}\nObject.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n});\n/**\n * Test if given object is an instance of {@link Point} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Point}, `false` otherwise.\n */\nfunction isPoint(obj) {\n  return (obj && obj[POINT_IDENTIFIER_PROPERTY]) === true;\n}\nexports.isPoint = isPoint;","map":null,"metadata":{},"sourceType":"script"}