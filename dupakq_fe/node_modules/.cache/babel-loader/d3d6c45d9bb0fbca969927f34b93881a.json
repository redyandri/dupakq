{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PROTOCOL_ERROR = exports.SESSION_EXPIRED = exports.SERVICE_UNAVAILABLE = exports.Neo4jError = exports.newError = void 0;\n// A common place for constructing error objects, to keep them\n// uniform across the driver surface.\n/**\n * Error code representing complete loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar SERVICE_UNAVAILABLE = 'ServiceUnavailable';\nexports.SERVICE_UNAVAILABLE = SERVICE_UNAVAILABLE;\n/**\n * Error code representing transient loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar SESSION_EXPIRED = 'SessionExpired';\nexports.SESSION_EXPIRED = SESSION_EXPIRED;\n/**\n * Error code representing serialization/deserialization issue in the Bolt protocol. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar PROTOCOL_ERROR = 'ProtocolError';\nexports.PROTOCOL_ERROR = PROTOCOL_ERROR;\n/**\n * Error code representing an no classified error. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar NOT_AVAILABLE = 'N/A';\n/// TODO: Remove definitions of this.constructor and this.__proto__\n/**\n * Class for all errors thrown/returned by the driver.\n */\nvar Neo4jError = /** @class */function (_super) {\n  __extends(Neo4jError, _super);\n  /**\n   * @constructor\n   * @param {string} message - the error message\n   * @param {string} code - Optional error code. Will be populated when error originates in the database.\n   */\n  function Neo4jError(message, code) {\n    var _this = _super.call(this, message) || this;\n    _this.constructor = Neo4jError;\n    // eslint-disable-next-line no-proto\n    _this.__proto__ = Neo4jError.prototype;\n    _this.code = code;\n    _this.name = 'Neo4jError';\n    return _this;\n  }\n  return Neo4jError;\n}(Error);\nexports.Neo4jError = Neo4jError;\n/**\n * Create a new error from a message and error code\n * @param message the error message\n * @param code the error code\n * @return {Neo4jError} an {@link Neo4jError}\n * @private\n */\nfunction newError(message, code) {\n  return new Neo4jError(message, code !== null && code !== void 0 ? code : NOT_AVAILABLE);\n}\nexports.newError = newError;","map":null,"metadata":{},"sourceType":"script"}