{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WRITE = exports.READ = exports.Driver = void 0;\nvar bookmark_1 = require(\"./internal/bookmark\");\nvar connectivity_verifier_1 = require(\"./internal/connectivity-verifier\");\nvar configured_custom_resolver_1 = __importDefault(require(\"./internal/resolver/configured-custom-resolver\"));\nvar constants_1 = require(\"./internal/constants\");\nvar logger_1 = require(\"./internal/logger\");\nvar session_1 = __importDefault(require(\"./session\"));\nvar util_1 = require(\"./internal/util\");\nvar DEFAULT_MAX_CONNECTION_LIFETIME = 60 * 60 * 1000; // 1 hour\n/**\n * The default record fetch size. This is used in Bolt V4 protocol to pull query execution result in batches.\n * @type {number}\n */\nvar DEFAULT_FETCH_SIZE = 1000;\n/**\n * Constant that represents read session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.READ })`.\n * @type {string}\n */\nvar READ = constants_1.ACCESS_MODE_READ;\nexports.READ = READ;\n/**\n * Constant that represents write session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.WRITE })`.\n * @type {string}\n */\nvar WRITE = constants_1.ACCESS_MODE_WRITE;\nexports.WRITE = WRITE;\nvar idGenerator = 0;\n/**\n * A driver maintains one or more {@link Session}s with a remote\n * Neo4j instance. Through the {@link Session}s you can send queries\n * and retrieve results from the database.\n *\n * Drivers are reasonably expensive to create - you should strive to keep one\n * driver instance around per Neo4j Instance you connect to.\n *\n * @access public\n */\nvar Driver = /** @class */function () {\n  /**\n   * You should not be calling this directly, instead use {@link driver}.\n   * @constructor\n   * @protected\n   * @param {Object} meta Metainformation about the driver\n   * @param {Object} config\n   * @param {function(id: number, config:Object, log:Logger, hostNameResolver: ConfiguredCustomResolver): ConnectionProvider } createConnectonProvider Creates the connection provider\n   * @param {function(args): Session } createSession Creates the a session\n  */\n  function Driver(meta, config, createConnectonProvider, createSession) {\n    if (config === void 0) {\n      config = {};\n    }\n    if (createSession === void 0) {\n      createSession = function createSession(args) {\n        return new session_1.default(args);\n      };\n    }\n    sanitizeConfig(config);\n    validateConfig(config);\n    this._id = idGenerator++;\n    this._meta = meta;\n    this._config = config;\n    this._log = logger_1.Logger.create(config);\n    this._createConnectionProvider = createConnectonProvider;\n    this._createSession = createSession;\n    /**\n     * Reference to the connection provider. Initialized lazily by {@link _getOrCreateConnectionProvider}.\n     * @type {ConnectionProvider}\n     * @protected\n     */\n    this._connectionProvider = null;\n    this._afterConstruction();\n  }\n  /**\n   * Verifies connectivity of this driver by trying to open a connection with the provided driver options.\n   *\n   * @public\n   * @param {Object} param - The object parameter\n   * @param {string} param.database - The target database to verify connectivity for.\n   * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.\n   */\n  Driver.prototype.verifyConnectivity = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.database,\n      database = _c === void 0 ? '' : _c;\n    var connectionProvider = this._getOrCreateConnectionProvider();\n    var connectivityVerifier = new connectivity_verifier_1.ConnectivityVerifier(connectionProvider);\n    return connectivityVerifier.verify({\n      database: database\n    });\n  };\n  /**\n   * Returns whether the server supports multi database capabilities based on the protocol\n   * version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n   */\n  Driver.prototype.supportsMultiDb = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n    return connectionProvider.supportsMultiDb();\n  };\n  /**\n   * Returns whether the server supports transaction config capabilities based on the protocol\n   * version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n   */\n  Driver.prototype.supportsTransactionConfig = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n    return connectionProvider.supportsTransactionConfig();\n  };\n  /**\n   * Returns whether the server supports user impersonation capabilities based on the protocol\n   * version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n   */\n  Driver.prototype.supportsUserImpersonation = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n    return connectionProvider.supportsUserImpersonation();\n  };\n  /**\n   * @protected\n   * @returns {boolean}\n   */\n  Driver.prototype._supportsRouting = function () {\n    return this._meta.routing;\n  };\n  /**\n   * Returns boolean to indicate if driver has been configured with encryption enabled.\n   *\n   * @protected\n   * @returns {boolean}\n   */\n  Driver.prototype._isEncrypted = function () {\n    return this._config.encrypted === util_1.ENCRYPTION_ON;\n  };\n  /**\n   * Returns the configured trust strategy that the driver has been configured with.\n   *\n   * @protected\n   * @returns {TrustStrategy}\n   */\n  Driver.prototype._getTrust = function () {\n    return this._config.trust;\n  };\n  /**\n   * Acquire a session to communicate with the database. The session will\n   * borrow connections from the underlying connection pool as required and\n   * should be considered lightweight and disposable.\n   *\n   * This comes with some responsibility - make sure you always call\n   * {@link close} when you are done using a session, and likewise,\n   * make sure you don't close your session before you are done using it. Once\n   * it is closed, the underlying connection will be released to the connection\n   * pool and made available for others to use.\n   *\n   * @public\n   * @param {Object} param - The object parameter\n   * @param {string} param.defaultAccessMode=WRITE - The access mode of this session, allowed values are {@link READ} and {@link WRITE}.\n   * @param {string|string[]} param.bookmarks - The initial reference or references to some previous\n   * transactions. Value is optional and absence indicates that that the bookmarks do not exist or are unknown.\n   * @param {number} param.fetchSize - The record fetch size of each batch of this session.\n   * Use {@link FETCH_ALL} to always pull all records in one batch. This will override the config value set on driver config.\n   * @param {string} param.database - The database this session will operate on.\n   * @param {string} param.impersonatedUser - The username which the user wants to impersonate for the duration of the session.\n   * @return {Session} new session.\n   */\n  Driver.prototype.session = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.defaultAccessMode,\n      defaultAccessMode = _c === void 0 ? WRITE : _c,\n      bookmarkOrBookmarks = _b.bookmarks,\n      _d = _b.database,\n      database = _d === void 0 ? '' : _d,\n      impersonatedUser = _b.impersonatedUser,\n      fetchSize = _b.fetchSize;\n    return this._newSession({\n      defaultAccessMode: defaultAccessMode,\n      bookmarkOrBookmarks: bookmarkOrBookmarks,\n      database: database,\n      reactive: false,\n      impersonatedUser: impersonatedUser,\n      fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize)\n    });\n  };\n  /**\n   * Close all open sessions and other associated resources. You should\n   * make sure to use this when you are done with this driver instance.\n   * @public\n   * @return {Promise<void>} promise resolved when the driver is closed.\n   */\n  Driver.prototype.close = function () {\n    this._log.info(\"Driver \" + this._id + \" closing\");\n    if (this._connectionProvider) {\n      return this._connectionProvider.close();\n    }\n    return Promise.resolve();\n  };\n  /**\n   * @protected\n   */\n  Driver.prototype._afterConstruction = function () {\n    this._log.info(this._meta.typename + \" driver \" + this._id + \" created for server address \" + this._meta.address);\n  };\n  /**\n   * @private\n   */\n  Driver.prototype._newSession = function (_a) {\n    var defaultAccessMode = _a.defaultAccessMode,\n      bookmarkOrBookmarks = _a.bookmarkOrBookmarks,\n      database = _a.database,\n      reactive = _a.reactive,\n      impersonatedUser = _a.impersonatedUser,\n      fetchSize = _a.fetchSize;\n    var sessionMode = session_1.default._validateSessionMode(defaultAccessMode);\n    var connectionProvider = this._getOrCreateConnectionProvider();\n    var bookmark = bookmarkOrBookmarks ? new bookmark_1.Bookmark(bookmarkOrBookmarks) : bookmark_1.Bookmark.empty();\n    return this._createSession({\n      mode: sessionMode,\n      database: database || '',\n      connectionProvider: connectionProvider,\n      bookmark: bookmark,\n      config: this._config,\n      reactive: reactive,\n      impersonatedUser: impersonatedUser,\n      fetchSize: fetchSize\n    });\n  };\n  /**\n   * @private\n   */\n  Driver.prototype._getOrCreateConnectionProvider = function () {\n    if (!this._connectionProvider) {\n      this._connectionProvider = this._createConnectionProvider(this._id, this._config, this._log, createHostNameResolver(this._config));\n    }\n    return this._connectionProvider;\n  };\n  return Driver;\n}();\nexports.Driver = Driver;\n/**\n * @private\n * @returns {Object} the given config.\n */\nfunction validateConfig(config) {\n  var resolver = config.resolver;\n  if (resolver && typeof resolver !== 'function') {\n    throw new TypeError(\"Configured resolver should be a function. Got: \" + resolver);\n  }\n  return config;\n}\n/**\n * @private\n */\nfunction sanitizeConfig(config) {\n  config.maxConnectionLifetime = sanitizeIntValue(config.maxConnectionLifetime, DEFAULT_MAX_CONNECTION_LIFETIME);\n  config.maxConnectionPoolSize = sanitizeIntValue(config.maxConnectionPoolSize, constants_1.DEFAULT_POOL_MAX_SIZE);\n  config.connectionAcquisitionTimeout = sanitizeIntValue(config.connectionAcquisitionTimeout, constants_1.DEFAULT_POOL_ACQUISITION_TIMEOUT);\n  config.fetchSize = validateFetchSizeValue(config.fetchSize, DEFAULT_FETCH_SIZE);\n}\n/**\n * @private\n */\nfunction sanitizeIntValue(rawValue, defaultWhenAbsent) {\n  var sanitizedValue = parseInt(rawValue, 10);\n  if (sanitizedValue > 0 || sanitizedValue === 0) {\n    return sanitizedValue;\n  } else if (sanitizedValue < 0) {\n    return Number.MAX_SAFE_INTEGER;\n  } else {\n    return defaultWhenAbsent;\n  }\n}\n/**\n * @private\n */\nfunction validateFetchSizeValue(rawValue, defaultWhenAbsent) {\n  var fetchSize = parseInt(rawValue, 10);\n  if (fetchSize > 0 || fetchSize === constants_1.FETCH_ALL) {\n    return fetchSize;\n  } else if (fetchSize === 0 || fetchSize < 0) {\n    throw new Error(\"The fetch size can only be a positive value or \" + constants_1.FETCH_ALL + \" for ALL. However fetchSize = \" + fetchSize);\n  } else {\n    return defaultWhenAbsent;\n  }\n}\n/**\n * @private\n * @returns {ConfiguredCustomResolver} new custom resolver that wraps the passed-in resolver function.\n *              If resolved function is not specified, it defaults to an identity resolver.\n */\nfunction createHostNameResolver(config) {\n  return new configured_custom_resolver_1.default(config.resolver);\n}\nexports.default = Driver;","map":null,"metadata":{},"sourceType":"script"}