{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE,\n  SESSION_EXPIRED = neo4j_driver_core_1.error.SESSION_EXPIRED;\nvar ConnectionErrorHandler = /** @class */function () {\n  function ConnectionErrorHandler(errorCode, handleUnavailability, handleWriteFailure, handleAuthorizationExpired) {\n    this._errorCode = errorCode;\n    this._handleUnavailability = handleUnavailability || noOpHandler;\n    this._handleWriteFailure = handleWriteFailure || noOpHandler;\n    this._handleAuthorizationExpired = handleAuthorizationExpired || noOpHandler;\n  }\n  ConnectionErrorHandler.create = function (_a) {\n    var errorCode = _a.errorCode,\n      handleUnavailability = _a.handleUnavailability,\n      handleWriteFailure = _a.handleWriteFailure,\n      handleAuthorizationExpired = _a.handleAuthorizationExpired;\n    return new ConnectionErrorHandler(errorCode, handleUnavailability, handleWriteFailure, handleAuthorizationExpired);\n  };\n  /**\n   * Error code to use for network errors.\n   * @return {string} the error code.\n   */\n  ConnectionErrorHandler.prototype.errorCode = function () {\n    return this._errorCode;\n  };\n  /**\n   * Handle and transform the error.\n   * @param {Neo4jError} error the original error.\n   * @param {ServerAddress} address the address of the connection where the error happened.\n   * @return {Neo4jError} new error that should be propagated to the user.\n   */\n  ConnectionErrorHandler.prototype.handleAndTransformError = function (error, address) {\n    if (isAutorizationExpiredError(error)) {\n      return this._handleAuthorizationExpired(error, address);\n    }\n    if (isAvailabilityError(error)) {\n      return this._handleUnavailability(error, address);\n    }\n    if (isFailureToWrite(error)) {\n      return this._handleWriteFailure(error, address);\n    }\n    return error;\n  };\n  return ConnectionErrorHandler;\n}();\nexports.default = ConnectionErrorHandler;\nfunction isAutorizationExpiredError(error) {\n  return error && (error.code === 'Neo.ClientError.Security.AuthorizationExpired' || error.code === 'Neo.ClientError.Security.TokenExpired');\n}\nfunction isAvailabilityError(error) {\n  if (error) {\n    return error.code === SESSION_EXPIRED || error.code === SERVICE_UNAVAILABLE || error.code === 'Neo.TransientError.General.DatabaseUnavailable';\n  }\n  return false;\n}\nfunction isFailureToWrite(error) {\n  if (error) {\n    return error.code === 'Neo.ClientError.Cluster.NotALeader' || error.code === 'Neo.ClientError.General.ForbiddenOnReadOnlyDatabase';\n  }\n  return false;\n}\nfunction noOpHandler(error) {\n  return error;\n}","map":null,"metadata":{},"sourceType":"script"}