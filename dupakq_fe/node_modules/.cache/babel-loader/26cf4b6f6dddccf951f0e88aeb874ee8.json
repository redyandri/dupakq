{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar bolt_protocol_v4x3_1 = __importDefault(require(\"./bolt-protocol-v4x3\"));\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar request_message_1 = __importDefault(require(\"./request-message\"));\nvar stream_observers_1 = require(\"./stream-observers\");\nvar _a = neo4j_driver_core_1.internal.constants,\n  BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4,\n  FETCH_ALL = _a.FETCH_ALL,\n  Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark;\nvar BoltProtocol = /** @class */function (_super) {\n  __extends(BoltProtocol, _super);\n  function BoltProtocol() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(BoltProtocol.prototype, \"version\", {\n    get: function get() {\n      return BOLT_PROTOCOL_V4_4;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n  * Request routing information\n  *\n  * @param {Object} param -\n  * @param {object} param.routingContext The routing context used to define the routing table.\n  *  Multi-datacenter deployments is one of its use cases\n  * @param {string} param.databaseName The database name\n  * @param {Bookmark} params.sessionContext.bookmark The bookmark used for request the routing table\n  * @param {function(err: Error)} param.onError\n  * @param {function(RawRoutingTable)} param.onCompleted\n  * @returns {RouteObserver} the route observer\n  */\n  BoltProtocol.prototype.requestRoutingInformation = function (_a) {\n    var _b = _a.routingContext,\n      routingContext = _b === void 0 ? {} : _b,\n      _c = _a.databaseName,\n      databaseName = _c === void 0 ? null : _c,\n      _d = _a.impersonatedUser,\n      impersonatedUser = _d === void 0 ? null : _d,\n      _e = _a.sessionContext,\n      sessionContext = _e === void 0 ? {} : _e,\n      onError = _a.onError,\n      onCompleted = _a.onCompleted;\n    var observer = new stream_observers_1.RouteObserver({\n      onProtocolError: this._onProtocolError,\n      onError: onError,\n      onCompleted: onCompleted\n    });\n    var bookmark = sessionContext.bookmark || Bookmark.empty();\n    this.write(request_message_1.default.routeV4x4(routingContext, bookmark.values(), {\n      databaseName: databaseName,\n      impersonatedUser: impersonatedUser\n    }), observer, true);\n    return observer;\n  };\n  BoltProtocol.prototype.run = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmark = _b.bookmark,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      beforeKeys = _b.beforeKeys,\n      afterKeys = _b.afterKeys,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete,\n      _c = _b.flush,\n      flush = _c === void 0 ? true : _c,\n      _d = _b.reactive,\n      reactive = _d === void 0 ? false : _d,\n      _e = _b.fetchSize,\n      fetchSize = _e === void 0 ? FETCH_ALL : _e;\n    var observer = new stream_observers_1.ResultStreamObserver({\n      server: this._server,\n      reactive: reactive,\n      fetchSize: fetchSize,\n      moreFunction: this._requestMore.bind(this),\n      discardFunction: this._requestDiscard.bind(this),\n      beforeKeys: beforeKeys,\n      afterKeys: afterKeys,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n    var flushRun = reactive;\n    this.write(request_message_1.default.runWithMetadata(query, parameters, {\n      bookmark: bookmark,\n      txConfig: txConfig,\n      database: database,\n      mode: mode,\n      impersonatedUser: impersonatedUser\n    }), observer, flushRun && flush);\n    if (!reactive) {\n      this.write(request_message_1.default.pull({\n        n: fetchSize\n      }), observer, flush);\n    }\n    return observer;\n  };\n  BoltProtocol.prototype.beginTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      bookmark = _b.bookmark,\n      txConfig = _b.txConfig,\n      database = _b.database,\n      mode = _b.mode,\n      impersonatedUser = _b.impersonatedUser,\n      beforeError = _b.beforeError,\n      afterError = _b.afterError,\n      beforeComplete = _b.beforeComplete,\n      afterComplete = _b.afterComplete;\n    var observer = new stream_observers_1.ResultStreamObserver({\n      server: this._server,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n    observer.prepareToHandleSingleResponse();\n    this.write(request_message_1.default.begin({\n      bookmark: bookmark,\n      txConfig: txConfig,\n      database: database,\n      mode: mode,\n      impersonatedUser: impersonatedUser\n    }), observer, true);\n    return observer;\n  };\n  return BoltProtocol;\n}(bolt_protocol_v4x3_1.default);\nexports.default = BoltProtocol;","map":null,"metadata":{},"sourceType":"script"}