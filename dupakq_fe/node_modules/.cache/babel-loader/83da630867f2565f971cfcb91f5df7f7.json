{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\nvar util = __importStar(require(\"./internal/temporal-util\"));\nvar util_1 = require(\"./internal/util\");\nvar error_1 = require(\"./error\");\nvar integer_1 = __importStar(require(\"./integer\"));\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Duration = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} months - The number of months for the new duration.\n   * @param {NumberOrInteger} days - The number of days for the new duration.\n   * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\n   * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\n   */\n  function Duration(months, days, seconds, nanoseconds) {\n    /**\n     * The number of months.\n     * @type {NumberOrInteger}\n     */\n    this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\n    /**\n     * The number of days.\n     * @type {NumberOrInteger}\n     */\n    this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\n    (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\n    (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n    /**\n     * The number of seconds.\n     * @type {NumberOrInteger}\n     */\n    this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n    /**\n     * The number of nanoseconds.\n     * @type {NumberOrInteger}\n     */\n    this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n    Object.freeze(this);\n  }\n  /**\n   * @ignore\n   */\n  Duration.prototype.toString = function () {\n    return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n  };\n  return Duration;\n}();\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Duration} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\n */\nfunction isDuration(obj) {\n  return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\nexports.isDuration = isDuration;\n/**\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalTime = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   */\n  function LocalTime(hour, minute, second, nanosecond) {\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month, day and time zone offset components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {LocalTime<number>} New LocalTime.\n   */\n  LocalTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\n    return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default ? totalNanoseconds.toInt() : typeof totalNanoseconds === 'bigint' ? (0, integer_1.int)(totalNanoseconds).toInt() : totalNanoseconds);\n  };\n  /**\n   * @ignore\n   */\n  LocalTime.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n  };\n  return LocalTime;\n}();\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalTime} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\n */\nfunction isLocalTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalTime = isLocalTime;\n/**\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Time = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   */\n  function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    /**\n     * The time zone offset in seconds.\n     * @type {NumberOrInteger}\n     */\n    this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month and day components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {Time<number>} New Time.\n   */\n  Time.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\n  };\n  /**\n   * @ignore\n   */\n  Time.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\n  };\n  return Time;\n}();\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Time} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\n */\nfunction isTime(obj) {\n  return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\nexports.isTime = isTime;\n/**\n * Represents an instant capturing the date, but not the time, nor the timezone.\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Date = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new local date.\n   * @param {NumberOrInteger} month - The month for the new local date.\n   * @param {NumberOrInteger} day - The day for the new local date.\n   */\n  function Date(year, month, day) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n    this.day = util.assertValidDay(day);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link Date} object from the given standard JavaScript `Date`.\n   * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @return {Date} New Date.\n   */\n  Date.fromStandardDate = function (standardDate) {\n    verifyStandardDateAndNanos(standardDate);\n    return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n  };\n  /**\n   * @ignore\n   */\n  Date.prototype.toString = function () {\n    return util.dateToIsoString(this.year, this.month, this.day);\n  };\n  return Date;\n}();\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Date} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\n */\nfunction isDate(obj) {\n  return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\nexports.isDate = isDate;\n/**\n * Represents an instant capturing the date and the time, but not the timezone.\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalDateTime = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new local date.\n   * @param {NumberOrInteger} month - The month for the new local date.\n   * @param {NumberOrInteger} day - The day for the new local date.\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   */\n  function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n    this.day = util.assertValidDay(day);\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Time zone offset component of the given date is ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {LocalDateTime} New LocalDateTime.\n   */\n  LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\n  };\n  /**\n   * @ignore\n   */\n  LocalDateTime.prototype.toString = function () {\n    return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n  };\n  return LocalDateTime;\n}();\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalDateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\n */\nfunction isLocalDateTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalDateTime = isLocalDateTime;\n/**\n * Represents an instant capturing the date, the time and the timezone identifier.\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar DateTime = /** @class */function () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new date-time.\n   * @param {NumberOrInteger} month - The month for the new date-time.\n   * @param {NumberOrInteger} day - The day for the new date-time.\n   * @param {NumberOrInteger} hour - The hour for the new date-time.\n   * @param {NumberOrInteger} minute - The minute for the new date-time.\n   * @param {NumberOrInteger} second - The second for the new date-time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\n   * Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\n   */\n  function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n    this.day = util.assertValidDay(day);\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2),\n      offset = _a[0],\n      id = _a[1];\n    /**\n     * The time zone offset in seconds.\n     *\n     * *Either this or {@link timeZoneId} is defined.*\n     *\n     * @type {NumberOrInteger}\n     */\n    this.timeZoneOffsetSeconds = offset;\n    /**\n     * The time zone id.\n     *\n     * *Either this or {@link timeZoneOffsetSeconds} is defined.*\n     *\n     * @type {string}\n     */\n    this.timeZoneId = id || undefined;\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {DateTime} New DateTime.\n   */\n  DateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null /* no time zone id */);\n  };\n  /**\n   * @ignore\n   */\n  DateTime.prototype.toString = function () {\n    var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    var timeZoneStr = this.timeZoneId ? \"[\" + this.timeZoneId + \"]\" : util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds || 0);\n    return localDateTimeStr + timeZoneStr;\n  };\n  return DateTime;\n}();\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link DateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\n */\nfunction isDateTime(obj) {\n  return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isDateTime = isDateTime;\nfunction hasIdentifierProperty(obj, property) {\n  return (obj && obj[property]) === true;\n}\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n  return util.dateToIsoString(year, month, day) + 'T' + util.timeToIsoString(hour, minute, second, nanosecond);\n}\n/**\n * @private\n * @param {NumberOrInteger} timeZoneOffsetSeconds\n * @param {string | null } timeZoneId\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\n */\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n  var offsetDefined = timeZoneOffsetSeconds || timeZoneOffsetSeconds === 0;\n  var idDefined = timeZoneId && timeZoneId !== '';\n  if (!offsetDefined && !idDefined) {\n    throw (0, error_1.newError)(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    \"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \" + timeZoneOffsetSeconds + \" and id: \" + timeZoneId);\n  }\n  var result = [undefined, undefined];\n  if (offsetDefined) {\n    (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    result[0] = timeZoneOffsetSeconds;\n  }\n  if (idDefined) {\n    (0, util_1.assertString)(timeZoneId, 'Time zone ID');\n    util.assertValidZoneId('Time zone ID', timeZoneId);\n    result[1] = timeZoneId;\n  }\n  return result;\n}\n/**\n * @private\n * @param {StandardDate} standardDate\n * @param {NumberOrInteger} nanosecond\n * @returns {void}\n */\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n  (0, util_1.assertValidDate)(standardDate, 'Standard date');\n  if (nanosecond !== null && nanosecond !== undefined) {\n    (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}