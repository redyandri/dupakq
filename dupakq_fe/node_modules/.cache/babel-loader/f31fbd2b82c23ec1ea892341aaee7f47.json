{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar routing_table_1 = __importDefault(require(\"./routing-table\"));\nvar bolt_1 = require(\"../bolt\");\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;\nvar PROCEDURE_NOT_FOUND_CODE = 'Neo.ClientError.Procedure.ProcedureNotFound';\nvar DATABASE_NOT_FOUND_CODE = 'Neo.ClientError.Database.DatabaseNotFound';\nvar Rediscovery = /** @class */function () {\n  /**\n   * @constructor\n   * @param {object} routingContext\n   */\n  function Rediscovery(routingContext) {\n    this._routingContext = routingContext;\n  }\n  /**\n   * Try to fetch new routing table from the given router.\n   * @param {Session} session the session to use.\n   * @param {string} database the database for which to lookup routing table.\n   * @param {ServerAddress} routerAddress the URL of the router.\n   * @param {string} impersonatedUser The impersonated user\n   * @return {Promise<RoutingTable>} promise resolved with new routing table or null when connection error happened.\n   */\n  Rediscovery.prototype.lookupRoutingTableOnRouter = function (session, database, routerAddress, impersonatedUser) {\n    var _this = this;\n    return session._acquireConnection(function (connection) {\n      return _this._requestRawRoutingTable(connection, session, database, routerAddress, impersonatedUser).then(function (rawRoutingTable) {\n        if (rawRoutingTable.isNull) {\n          return null;\n        }\n        return routing_table_1.default.fromRawRoutingTable(database, routerAddress, rawRoutingTable);\n      });\n    });\n  };\n  Rediscovery.prototype._requestRawRoutingTable = function (connection, session, database, routerAddress, impersonatedUser) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      connection.protocol().requestRoutingInformation({\n        routingContext: _this._routingContext,\n        databaseName: database,\n        impersonatedUser: impersonatedUser,\n        sessionContext: {\n          bookmark: session._lastBookmark,\n          mode: session._mode,\n          database: session._database,\n          afterComplete: session._onComplete\n        },\n        onCompleted: resolve,\n        onError: function onError(error) {\n          if (error.code === DATABASE_NOT_FOUND_CODE) {\n            reject(error);\n          } else if (error.code === PROCEDURE_NOT_FOUND_CODE) {\n            // throw when getServers procedure not found because this is clearly a configuration issue\n            reject((0, neo4j_driver_core_1.newError)(\"Server at \" + routerAddress.asHostPort() + \" can't perform routing. Make sure you are connecting to a causal cluster\", SERVICE_UNAVAILABLE));\n          } else {\n            // return nothing when failed to connect because code higher in the callstack is still able to retry with a\n            // different session towards a different router\n            resolve(bolt_1.RawRoutingTable.ofNull());\n          }\n        }\n      });\n    });\n  };\n  return Rediscovery;\n}();\nexports.default = Rediscovery;","map":null,"metadata":{},"sourceType":"script"}