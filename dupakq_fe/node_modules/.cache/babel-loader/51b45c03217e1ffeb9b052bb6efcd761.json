{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar rediscovery_1 = __importStar(require(\"../rediscovery\"));\nvar channel_1 = require(\"../channel\");\nvar connection_provider_single_1 = __importDefault(require(\"./connection-provider-single\"));\nvar connection_provider_pooled_1 = __importDefault(require(\"./connection-provider-pooled\"));\nvar load_balancing_1 = require(\"../load-balancing\");\nvar connection_1 = require(\"../connection\");\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE,\n  SESSION_EXPIRED = neo4j_driver_core_1.error.SESSION_EXPIRED;\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark,\n  _a = neo4j_driver_core_1.internal.constants,\n  READ = _a.ACCESS_MODE_READ,\n  WRITE = _a.ACCESS_MODE_WRITE,\n  BOLT_PROTOCOL_V3 = _a.BOLT_PROTOCOL_V3,\n  BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0,\n  BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;\nvar UNAUTHORIZED_ERROR_CODE = 'Neo.ClientError.Security.Unauthorized';\nvar DATABASE_NOT_FOUND_ERROR_CODE = 'Neo.ClientError.Database.DatabaseNotFound';\nvar SYSTEM_DB_NAME = 'system';\nvar DEFAULT_DB_NAME = null;\nvar DEFAULT_ROUTING_TABLE_PURGE_DELAY = (0, neo4j_driver_core_1.int)(30000);\nvar RoutingConnectionProvider = /** @class */function (_super) {\n  __extends(RoutingConnectionProvider, _super);\n  function RoutingConnectionProvider(_a) {\n    var id = _a.id,\n      address = _a.address,\n      routingContext = _a.routingContext,\n      hostNameResolver = _a.hostNameResolver,\n      config = _a.config,\n      log = _a.log,\n      userAgent = _a.userAgent,\n      authToken = _a.authToken,\n      routingTablePurgeDelay = _a.routingTablePurgeDelay;\n    var _this = _super.call(this, {\n      id: id,\n      config: config,\n      log: log,\n      userAgent: userAgent,\n      authToken: authToken\n    }, function (address) {\n      return (0, connection_1.createChannelConnection)(address, _this._config, _this._createConnectionErrorHandler(), _this._log, _this._routingContext);\n    }) || this;\n    _this._routingContext = __assign(__assign({}, routingContext), {\n      address: address.toString()\n    });\n    _this._seedRouter = address;\n    _this._rediscovery = new rediscovery_1.default(_this._routingContext);\n    _this._loadBalancingStrategy = new load_balancing_1.LeastConnectedLoadBalancingStrategy(_this._connectionPool);\n    _this._hostNameResolver = hostNameResolver;\n    _this._dnsResolver = new channel_1.HostNameResolver();\n    _this._log = log;\n    _this._useSeedRouter = true;\n    _this._routingTableRegistry = new RoutingTableRegistry(routingTablePurgeDelay ? (0, neo4j_driver_core_1.int)(routingTablePurgeDelay) : DEFAULT_ROUTING_TABLE_PURGE_DELAY);\n    return _this;\n  }\n  RoutingConnectionProvider.prototype._createConnectionErrorHandler = function () {\n    // connection errors mean SERVICE_UNAVAILABLE for direct driver but for routing driver they should only\n    // result in SESSION_EXPIRED because there might still exist other servers capable of serving the request\n    return new connection_1.ConnectionErrorHandler(SESSION_EXPIRED);\n  };\n  RoutingConnectionProvider.prototype._handleUnavailability = function (error, address, database) {\n    this._log.warn(\"Routing driver \" + this._id + \" will forget \" + address + \" for database '\" + database + \"' because of an error \" + error.code + \" '\" + error.message + \"'\");\n    this.forget(address, database || DEFAULT_DB_NAME);\n    return error;\n  };\n  RoutingConnectionProvider.prototype._handleAuthorizationExpired = function (error, address, database) {\n    this._log.warn(\"Routing driver \" + this._id + \" will close connections to \" + address + \" for database '\" + database + \"' because of an error \" + error.code + \" '\" + error.message + \"'\");\n    this._connectionPool.purge(address).catch(function () {});\n    return error;\n  };\n  RoutingConnectionProvider.prototype._handleWriteFailure = function (error, address, database) {\n    this._log.warn(\"Routing driver \" + this._id + \" will forget writer \" + address + \" for database '\" + database + \"' because of an error \" + error.code + \" '\" + error.message + \"'\");\n    this.forgetWriter(address, database || DEFAULT_DB_NAME);\n    return (0, neo4j_driver_core_1.newError)('No longer possible to write to server at ' + address, SESSION_EXPIRED);\n  };\n  /**\n   * See {@link ConnectionProvider} for more information about this method and\n   * its arguments.\n   */\n  RoutingConnectionProvider.prototype.acquireConnection = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      accessMode = _b.accessMode,\n      database = _b.database,\n      bookmarks = _b.bookmarks,\n      impersonatedUser = _b.impersonatedUser,\n      _onDatabaseNameResolved = _b.onDatabaseNameResolved;\n    return __awaiter(this, void 0, void 0, function () {\n      var name, address, context, databaseSpecificErrorHandler, routingTable, connection, error_1, transformed;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            context = {\n              database: database || DEFAULT_DB_NAME\n            };\n            databaseSpecificErrorHandler = new connection_1.ConnectionErrorHandler(SESSION_EXPIRED, function (error, address) {\n              return _this._handleUnavailability(error, address, context.database);\n            }, function (error, address) {\n              return _this._handleWriteFailure(error, address, context.database);\n            }, function (error, address) {\n              return _this._handleAuthorizationExpired(error, address, context.database);\n            });\n            return [4 /*yield*/, this._freshRoutingTable({\n              accessMode: accessMode,\n              database: context.database,\n              bookmark: bookmarks,\n              impersonatedUser: impersonatedUser,\n              onDatabaseNameResolved: function onDatabaseNameResolved(databaseName) {\n                context.database = context.database || databaseName;\n                if (_onDatabaseNameResolved) {\n                  _onDatabaseNameResolved(databaseName);\n                }\n              }\n            })\n            // select a target server based on specified access mode\n            ];\n\n          case 1:\n            routingTable = _c.sent();\n            // select a target server based on specified access mode\n            if (accessMode === READ) {\n              address = this._loadBalancingStrategy.selectReader(routingTable.readers);\n              name = 'read';\n            } else if (accessMode === WRITE) {\n              address = this._loadBalancingStrategy.selectWriter(routingTable.writers);\n              name = 'write';\n            } else {\n              throw (0, neo4j_driver_core_1.newError)('Illegal mode ' + accessMode);\n            }\n            // we couldn't select a target server\n            if (!address) {\n              throw (0, neo4j_driver_core_1.newError)(\"Failed to obtain connection towards \" + name + \" server. Known routing table is: \" + routingTable, SESSION_EXPIRED);\n            }\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, this._acquireConnectionToServer(address, name, routingTable)];\n          case 3:\n            connection = _c.sent();\n            return [2 /*return*/, new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler)];\n          case 4:\n            error_1 = _c.sent();\n            transformed = databaseSpecificErrorHandler.handleAndTransformError(error_1, address);\n            throw transformed;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._hasProtocolVersion = function (versionPredicate) {\n    return __awaiter(this, void 0, void 0, function () {\n      var addresses, lastError, i, connection, protocolVersion, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._resolveSeedRouter(this._seedRouter)];\n          case 1:\n            addresses = _a.sent();\n            i = 0;\n            _a.label = 2;\n          case 2:\n            if (!(i < addresses.length)) return [3 /*break*/, 8];\n            _a.label = 3;\n          case 3:\n            _a.trys.push([3, 6,, 7]);\n            return [4 /*yield*/, (0, connection_1.createChannelConnection)(addresses[i], this._config, this._createConnectionErrorHandler(), this._log)];\n          case 4:\n            connection = _a.sent();\n            protocolVersion = connection.protocol() ? connection.protocol().version : null;\n            return [4 /*yield*/, connection.close()];\n          case 5:\n            _a.sent();\n            if (protocolVersion) {\n              return [2 /*return*/, versionPredicate(protocolVersion)];\n            }\n            return [2 /*return*/, false];\n          case 6:\n            error_2 = _a.sent();\n            lastError = error_2;\n            return [3 /*break*/, 7];\n          case 7:\n            i++;\n            return [3 /*break*/, 2];\n          case 8:\n            if (lastError) {\n              throw lastError;\n            }\n            return [2 /*return*/, false];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype.supportsMultiDb = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._hasProtocolVersion(function (version) {\n              return version >= BOLT_PROTOCOL_V4_0;\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype.supportsTransactionConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._hasProtocolVersion(function (version) {\n              return version >= BOLT_PROTOCOL_V3;\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype.supportsUserImpersonation = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._hasProtocolVersion(function (version) {\n              return version >= BOLT_PROTOCOL_V4_4;\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype.forget = function (address, database) {\n    this._routingTableRegistry.apply(database, {\n      applyWhenExists: function applyWhenExists(routingTable) {\n        return routingTable.forget(address);\n      }\n    });\n    // We're firing and forgetting this operation explicitly and listening for any\n    // errors to avoid unhandled promise rejection\n    this._connectionPool.purge(address).catch(function () {});\n  };\n  RoutingConnectionProvider.prototype.forgetWriter = function (address, database) {\n    this._routingTableRegistry.apply(database, {\n      applyWhenExists: function applyWhenExists(routingTable) {\n        return routingTable.forgetWriter(address);\n      }\n    });\n  };\n  RoutingConnectionProvider.prototype._acquireConnectionToServer = function (address, serverName, routingTable) {\n    return this._connectionPool.acquire(address);\n  };\n  RoutingConnectionProvider.prototype._freshRoutingTable = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      accessMode = _b.accessMode,\n      database = _b.database,\n      bookmark = _b.bookmark,\n      impersonatedUser = _b.impersonatedUser,\n      onDatabaseNameResolved = _b.onDatabaseNameResolved;\n    var currentRoutingTable = this._routingTableRegistry.get(database, function () {\n      return new rediscovery_1.RoutingTable({\n        database: database\n      });\n    });\n    if (!currentRoutingTable.isStaleFor(accessMode)) {\n      return currentRoutingTable;\n    }\n    this._log.info(\"Routing table is stale for database: \\\"\" + database + \"\\\" and access mode: \\\"\" + accessMode + \"\\\": \" + currentRoutingTable);\n    return this._refreshRoutingTable(currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved);\n  };\n  RoutingConnectionProvider.prototype._refreshRoutingTable = function (currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved) {\n    var knownRouters = currentRoutingTable.routers;\n    if (this._useSeedRouter) {\n      return this._fetchRoutingTableFromSeedRouterFallbackToKnownRouters(knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved);\n    }\n    return this._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved);\n  };\n  RoutingConnectionProvider.prototype._fetchRoutingTableFromSeedRouterFallbackToKnownRouters = function (knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved) {\n    return __awaiter(this, void 0, void 0, function () {\n      var seenRouters, newRoutingTable;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            seenRouters = [];\n            return [4 /*yield*/, this._fetchRoutingTableUsingSeedRouter(seenRouters, this._seedRouter, currentRoutingTable, bookmark, impersonatedUser)];\n          case 1:\n            newRoutingTable = _a.sent();\n            if (!newRoutingTable) return [3 /*break*/, 2];\n            this._useSeedRouter = false;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark, impersonatedUser)];\n          case 3:\n            // seed router did not return a valid routing table - try to use other known routers\n            newRoutingTable = _a.sent();\n            _a.label = 4;\n          case 4:\n            return [4 /*yield*/, this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, onDatabaseNameResolved)];\n          case 5:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter = function (knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved) {\n    return __awaiter(this, void 0, void 0, function () {\n      var newRoutingTable;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark, impersonatedUser)];\n          case 1:\n            newRoutingTable = _a.sent();\n            if (!!newRoutingTable) return [3 /*break*/, 3];\n            return [4 /*yield*/, this._fetchRoutingTableUsingSeedRouter(knownRouters, this._seedRouter, currentRoutingTable, bookmark, impersonatedUser)];\n          case 2:\n            // none of the known routers returned a valid routing table - try to use seed router address for rediscovery\n            newRoutingTable = _a.sent();\n            _a.label = 3;\n          case 3:\n            return [4 /*yield*/, this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, onDatabaseNameResolved)];\n          case 4:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype._fetchRoutingTableUsingKnownRouters = function (knownRouters, currentRoutingTable, bookmark, impersonatedUser) {\n    return __awaiter(this, void 0, void 0, function () {\n      var newRoutingTable, lastRouterIndex;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._fetchRoutingTable(knownRouters, currentRoutingTable, bookmark, impersonatedUser)];\n          case 1:\n            newRoutingTable = _a.sent();\n            if (newRoutingTable) {\n              // one of the known routers returned a valid routing table - use it\n              return [2 /*return*/, newRoutingTable];\n            }\n            lastRouterIndex = knownRouters.length - 1;\n            RoutingConnectionProvider._forgetRouter(currentRoutingTable, knownRouters, lastRouterIndex);\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype._fetchRoutingTableUsingSeedRouter = function (seenRouters, seedRouter, routingTable, bookmark, impersonatedUser) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resolvedAddresses, newAddresses;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._resolveSeedRouter(seedRouter)\n            // filter out all addresses that we've already tried\n            ];\n\n          case 1:\n            resolvedAddresses = _a.sent();\n            newAddresses = resolvedAddresses.filter(function (address) {\n              return seenRouters.indexOf(address) < 0;\n            });\n            return [4 /*yield*/, this._fetchRoutingTable(newAddresses, routingTable, bookmark, impersonatedUser)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype._resolveSeedRouter = function (seedRouter) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resolvedAddresses, dnsResolvedAddresses;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._hostNameResolver.resolve(seedRouter)];\n          case 1:\n            resolvedAddresses = _a.sent();\n            return [4 /*yield*/, Promise.all(resolvedAddresses.map(function (address) {\n              return _this._dnsResolver.resolve(address);\n            }))];\n          case 2:\n            dnsResolvedAddresses = _a.sent();\n            return [2 /*return*/, [].concat.apply([], dnsResolvedAddresses)];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype._fetchRoutingTable = function (routerAddresses, routingTable, bookmark, impersonatedUser) {\n    var _this = this;\n    return routerAddresses.reduce(function (refreshedTablePromise, currentRouter, currentIndex) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var newRoutingTable, previousRouterIndex, session, error_3;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, refreshedTablePromise];\n            case 1:\n              newRoutingTable = _a.sent();\n              if (newRoutingTable) {\n                // valid routing table was fetched - just return it, try next router otherwise\n                return [2 /*return*/, newRoutingTable];\n              } else {\n                previousRouterIndex = currentIndex - 1;\n                RoutingConnectionProvider._forgetRouter(routingTable, routerAddresses, previousRouterIndex);\n              }\n              return [4 /*yield*/, this._createSessionForRediscovery(currentRouter, bookmark, impersonatedUser)];\n            case 2:\n              session = _a.sent();\n              if (!session) return [3 /*break*/, 8];\n              _a.label = 3;\n            case 3:\n              _a.trys.push([3, 5, 6, 7]);\n              return [4 /*yield*/, this._rediscovery.lookupRoutingTableOnRouter(session, routingTable.database, currentRouter, impersonatedUser)];\n            case 4:\n              return [2 /*return*/, _a.sent()];\n            case 5:\n              error_3 = _a.sent();\n              if (error_3 && error_3.code === DATABASE_NOT_FOUND_ERROR_CODE) {\n                // not finding the target database is a sign of a configuration issue\n                throw error_3;\n              }\n              this._log.warn(\"unable to fetch routing table because of an error \" + error_3);\n              return [2 /*return*/, null];\n            case 6:\n              session.close();\n              return [7 /*endfinally*/];\n            case 7:\n              return [3 /*break*/, 9];\n            case 8:\n              // unable to acquire connection and create session towards the current router\n              // return null to signal that the next router should be tried\n              return [2 /*return*/, null];\n            case 9:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, Promise.resolve(null));\n  };\n  RoutingConnectionProvider.prototype._createSessionForRediscovery = function (routerAddress, bookmark, impersonatedUser) {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection, databaseSpecificErrorHandler, connectionProvider, protocolVersion, error_4;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._connectionPool.acquire(routerAddress)];\n          case 1:\n            connection = _a.sent();\n            databaseSpecificErrorHandler = connection_1.ConnectionErrorHandler.create({\n              errorCode: SESSION_EXPIRED,\n              handleAuthorizationExpired: function handleAuthorizationExpired(error, address) {\n                return _this._handleAuthorizationExpired(error, address);\n              }\n            });\n            connectionProvider = new connection_provider_single_1.default(new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler));\n            protocolVersion = connection.protocol().version;\n            if (protocolVersion < 4.0) {\n              return [2 /*return*/, new neo4j_driver_core_1.Session({\n                mode: WRITE,\n                bookmark: Bookmark.empty(),\n                connectionProvider: connectionProvider\n              })];\n            }\n            return [2 /*return*/, new neo4j_driver_core_1.Session({\n              mode: READ,\n              database: SYSTEM_DB_NAME,\n              bookmark: bookmark,\n              connectionProvider: connectionProvider,\n              impersonatedUser: impersonatedUser\n            })];\n          case 2:\n            error_4 = _a.sent();\n            // unable to acquire connection towards the given router\n            if (error_4 && error_4.code === UNAUTHORIZED_ERROR_CODE) {\n              // auth error and not finding system database is a sign of a configuration issue\n              // discovery should not proceed\n              throw error_4;\n            }\n            return [2 /*return*/, null];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._applyRoutingTableIfPossible = function (currentRoutingTable, newRoutingTable, onDatabaseNameResolved) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!newRoutingTable) {\n              // none of routing servers returned valid routing table, throw exception\n              throw (0, neo4j_driver_core_1.newError)(\"Could not perform discovery. No routing servers available. Known routing table: \" + currentRoutingTable, SERVICE_UNAVAILABLE);\n            }\n            if (newRoutingTable.writers.length === 0) {\n              // use seed router next time. this is important when cluster is partitioned. it tries to make sure driver\n              // does not always get routing table without writers because it talks exclusively to a minority partition\n              this._useSeedRouter = true;\n            }\n            return [4 /*yield*/, this._updateRoutingTable(newRoutingTable, onDatabaseNameResolved)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, newRoutingTable];\n        }\n      });\n    });\n  };\n  RoutingConnectionProvider.prototype._updateRoutingTable = function (newRoutingTable, onDatabaseNameResolved) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // close old connections to servers not present in the new routing table\n            return [4 /*yield*/, this._connectionPool.keepAll(newRoutingTable.allServers())];\n          case 1:\n            // close old connections to servers not present in the new routing table\n            _a.sent();\n            this._routingTableRegistry.removeExpired();\n            this._routingTableRegistry.register(newRoutingTable);\n            onDatabaseNameResolved(newRoutingTable.database);\n            this._log.info(\"Updated routing table \" + newRoutingTable);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider._forgetRouter = function (routingTable, routersArray, routerIndex) {\n    var address = routersArray[routerIndex];\n    if (routingTable && address) {\n      routingTable.forgetRouter(address);\n    }\n  };\n  return RoutingConnectionProvider;\n}(connection_provider_pooled_1.default);\nexports.default = RoutingConnectionProvider;\n/**\n * Responsible for keeping track of the existing routing tables\n */\nvar RoutingTableRegistry = /** @class */function () {\n  /**\n   * Constructor\n   * @param {int} routingTablePurgeDelay The routing table purge delay\n   */\n  function RoutingTableRegistry(routingTablePurgeDelay) {\n    this._tables = new Map();\n    this._routingTablePurgeDelay = routingTablePurgeDelay;\n  }\n  /**\n   * Put a routing table in the registry\n   *\n   * @param {RoutingTable} table The routing table\n   * @returns {RoutingTableRegistry} this\n   */\n  RoutingTableRegistry.prototype.register = function (table) {\n    this._tables.set(table.database, table);\n    return this;\n  };\n  /**\n   * Apply function in the routing table for an specific database. If the database name is not defined, the function will\n   * be applied for each element\n   *\n   * @param {string} database The database name\n   * @param {object} callbacks The actions\n   * @param {function (RoutingTable)} callbacks.applyWhenExists Call when the db exists or when the database property is not informed\n   * @param {function ()} callbacks.applyWhenDontExists Call when the database doesn't have the routing table registred\n   * @returns {RoutingTableRegistry} this\n   */\n  RoutingTableRegistry.prototype.apply = function (database, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      applyWhenExists = _b.applyWhenExists,\n      _c = _b.applyWhenDontExists,\n      applyWhenDontExists = _c === void 0 ? function () {} : _c;\n    if (this._tables.has(database)) {\n      applyWhenExists(this._tables.get(database));\n    } else if (typeof database === 'string' || database === null) {\n      applyWhenDontExists();\n    } else {\n      this._forEach(applyWhenExists);\n    }\n    return this;\n  };\n  /**\n   * Retrieves a routing table from a given database name\n   *\n   * @param {string|impersonatedUser} impersonatedUser The impersonated User\n   * @param {string} database The database name\n   * @param {function()|RoutingTable} defaultSupplier The routing table supplier, if it's not a function or not exists, it will return itself as default value\n   * @returns {RoutingTable} The routing table for the respective database\n   */\n  RoutingTableRegistry.prototype.get = function (database, defaultSupplier) {\n    if (this._tables.has(database)) {\n      return this._tables.get(database);\n    }\n    return typeof defaultSupplier === 'function' ? defaultSupplier() : defaultSupplier;\n  };\n  /**\n   * Remove the routing table which is already expired\n   * @returns {RoutingTableRegistry} this\n   */\n  RoutingTableRegistry.prototype.removeExpired = function () {\n    var _this = this;\n    return this._removeIf(function (value) {\n      return value.isExpiredFor(_this._routingTablePurgeDelay);\n    });\n  };\n  RoutingTableRegistry.prototype._forEach = function (apply) {\n    var e_1, _a;\n    try {\n      for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n          value = _d[1];\n        apply(value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return this;\n  };\n  RoutingTableRegistry.prototype._remove = function (key) {\n    this._tables.delete(key);\n    return this;\n  };\n  RoutingTableRegistry.prototype._removeIf = function (predicate) {\n    var e_2, _a;\n    try {\n      for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n          key = _d[0],\n          value = _d[1];\n        if (predicate(value)) {\n          this._remove(key);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return this;\n  };\n  return RoutingTableRegistry;\n}();","map":null,"metadata":{},"sourceType":"script"}