{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @property {function(username: string, password: string, realm: ?string)} basic the function to create a\n * basic authentication token.\n * @property {function(base64EncodedTicket: string)} kerberos the function to create a Kerberos authentication token.\n * Accepts a single string argument - base64 encoded Kerberos ticket.\n * @property {function(base64EncodedTicket: string)} bearer the function to create a Bearer authentication token.\n * Accepts a single string argument - base64 encoded Bearer ticket.\n * @property {function(principal: string, credentials: string, realm: string, scheme: string, parameters: ?object)} custom\n * the function to create a custom authentication token.\n */\nvar auth = {\n  basic: function basic(username, password, realm) {\n    if (realm) {\n      return {\n        scheme: 'basic',\n        principal: username,\n        credentials: password,\n        realm: realm\n      };\n    } else {\n      return {\n        scheme: 'basic',\n        principal: username,\n        credentials: password\n      };\n    }\n  },\n  kerberos: function kerberos(base64EncodedTicket) {\n    return {\n      scheme: 'kerberos',\n      principal: '',\n      credentials: base64EncodedTicket\n    };\n  },\n  bearer: function bearer(base64EncodedToken) {\n    return {\n      scheme: 'bearer',\n      credentials: base64EncodedToken\n    };\n  },\n  custom: function custom(principal, credentials, realm, scheme, parameters) {\n    if (parameters) {\n      return {\n        scheme: scheme,\n        principal: principal,\n        credentials: credentials,\n        realm: realm,\n        parameters: parameters\n      };\n    } else {\n      return {\n        scheme: scheme,\n        principal: principal,\n        credentials: credentials,\n        realm: realm\n      };\n    }\n  }\n};\nexports.default = auth;","map":null,"metadata":{},"sourceType":"script"}