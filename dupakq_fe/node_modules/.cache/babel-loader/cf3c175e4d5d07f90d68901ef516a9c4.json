{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerAddress = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar util_1 = require(\"./util\");\nvar urlUtil = __importStar(require(\"./url-util\"));\nvar ServerAddress = /** @class */function () {\n  function ServerAddress(host, resolved, port, hostPort) {\n    this._host = (0, util_1.assertString)(host, 'host');\n    this._resolved = resolved ? (0, util_1.assertString)(resolved, 'resolved') : null;\n    this._port = (0, util_1.assertNumber)(port, 'port');\n    this._hostPort = hostPort;\n    this._stringValue = resolved ? hostPort + \"(\" + resolved + \")\" : \"\" + hostPort;\n  }\n  ServerAddress.prototype.host = function () {\n    return this._host;\n  };\n  ServerAddress.prototype.resolvedHost = function () {\n    return this._resolved ? this._resolved : this._host;\n  };\n  ServerAddress.prototype.port = function () {\n    return this._port;\n  };\n  ServerAddress.prototype.resolveWith = function (resolved) {\n    return new ServerAddress(this._host, resolved, this._port, this._hostPort);\n  };\n  ServerAddress.prototype.asHostPort = function () {\n    return this._hostPort;\n  };\n  ServerAddress.prototype.asKey = function () {\n    return this._hostPort;\n  };\n  ServerAddress.prototype.toString = function () {\n    return this._stringValue;\n  };\n  ServerAddress.fromUrl = function (url) {\n    var urlParsed = urlUtil.parseDatabaseUrl(url);\n    return new ServerAddress(urlParsed.host, null, urlParsed.port, urlParsed.hostAndPort);\n  };\n  return ServerAddress;\n}();\nexports.ServerAddress = ServerAddress;","map":null,"metadata":{},"sourceType":"script"}