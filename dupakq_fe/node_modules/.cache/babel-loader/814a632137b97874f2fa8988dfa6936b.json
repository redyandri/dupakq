{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar error_1 = require(\"../error\");\nvar ERROR = 'error';\nvar WARN = 'warn';\nvar INFO = 'info';\nvar DEBUG = 'debug';\nvar DEFAULT_LEVEL = INFO;\nvar levels = (_a = {}, _a[ERROR] = 0, _a[WARN] = 1, _a[INFO] = 2, _a[DEBUG] = 3, _a);\n/**\n * Logger used by the driver to notify about various internal events. Single logger should be used per driver.\n */\nvar Logger = /** @class */function () {\n  /**\n   * @constructor\n   * @param {string} level the enabled logging level.\n   * @param {function(level: string, message: string)} loggerFunction the function to write the log level and message.\n   */\n  function Logger(level, loggerFunction) {\n    this._level = level;\n    this._loggerFunction = loggerFunction;\n  }\n  /**\n   * Create a new logger based on the given driver configuration.\n   * @param {Object} driverConfig the driver configuration as supplied by the user.\n   * @return {Logger} a new logger instance or a no-op logger when not configured.\n   */\n  Logger.create = function (driverConfig) {\n    if (driverConfig && driverConfig.logging) {\n      var loggingConfig = driverConfig.logging;\n      var level = extractConfiguredLevel(loggingConfig);\n      var loggerFunction = extractConfiguredLogger(loggingConfig);\n      return new Logger(level, loggerFunction);\n    }\n    return this.noOp();\n  };\n  /**\n   * Create a no-op logger implementation.\n   * @return {Logger} the no-op logger implementation.\n   */\n  Logger.noOp = function () {\n    return noOpLogger;\n  };\n  /**\n   * Check if error logging is enabled, i.e. it is not a no-op implementation.\n   * @return {boolean} `true` when enabled, `false` otherwise.\n   */\n  Logger.prototype.isErrorEnabled = function () {\n    return isLevelEnabled(this._level, ERROR);\n  };\n  /**\n   * Log an error message.\n   * @param {string} message the message to log.\n   */\n  Logger.prototype.error = function (message) {\n    if (this.isErrorEnabled()) {\n      this._loggerFunction(ERROR, message);\n    }\n  };\n  /**\n   * Check if warn logging is enabled, i.e. it is not a no-op implementation.\n   * @return {boolean} `true` when enabled, `false` otherwise.\n   */\n  Logger.prototype.isWarnEnabled = function () {\n    return isLevelEnabled(this._level, WARN);\n  };\n  /**\n   * Log an warning message.\n   * @param {string} message the message to log.\n   */\n  Logger.prototype.warn = function (message) {\n    if (this.isWarnEnabled()) {\n      this._loggerFunction(WARN, message);\n    }\n  };\n  /**\n   * Check if info logging is enabled, i.e. it is not a no-op implementation.\n   * @return {boolean} `true` when enabled, `false` otherwise.\n   */\n  Logger.prototype.isInfoEnabled = function () {\n    return isLevelEnabled(this._level, INFO);\n  };\n  /**\n   * Log an info message.\n   * @param {string} message the message to log.\n   */\n  Logger.prototype.info = function (message) {\n    if (this.isInfoEnabled()) {\n      this._loggerFunction(INFO, message);\n    }\n  };\n  /**\n   * Check if debug logging is enabled, i.e. it is not a no-op implementation.\n   * @return {boolean} `true` when enabled, `false` otherwise.\n   */\n  Logger.prototype.isDebugEnabled = function () {\n    return isLevelEnabled(this._level, DEBUG);\n  };\n  /**\n   * Log a debug message.\n   * @param {string} message the message to log.\n   */\n  Logger.prototype.debug = function (message) {\n    if (this.isDebugEnabled()) {\n      this._loggerFunction(DEBUG, message);\n    }\n  };\n  return Logger;\n}();\nexports.Logger = Logger;\nvar NoOpLogger = /** @class */function (_super) {\n  __extends(NoOpLogger, _super);\n  function NoOpLogger() {\n    return _super.call(this, INFO, function (level, message) {}) || this;\n  }\n  NoOpLogger.prototype.isErrorEnabled = function () {\n    return false;\n  };\n  NoOpLogger.prototype.error = function (message) {};\n  NoOpLogger.prototype.isWarnEnabled = function () {\n    return false;\n  };\n  NoOpLogger.prototype.warn = function (message) {};\n  NoOpLogger.prototype.isInfoEnabled = function () {\n    return false;\n  };\n  NoOpLogger.prototype.info = function (message) {};\n  NoOpLogger.prototype.isDebugEnabled = function () {\n    return false;\n  };\n  NoOpLogger.prototype.debug = function (message) {};\n  return NoOpLogger;\n}(Logger);\nvar noOpLogger = new NoOpLogger();\n/**\n * Check if the given logging level is enabled.\n * @param {string} configuredLevel the configured level.\n * @param {string} targetLevel the level to check.\n * @return {boolean} value of `true` when enabled, `false` otherwise.\n */\nfunction isLevelEnabled(configuredLevel, targetLevel) {\n  return levels[configuredLevel] >= levels[targetLevel];\n}\n/**\n * Extract the configured logging level from the driver's logging configuration.\n * @param {Object} loggingConfig the logging configuration.\n * @return {string} the configured log level or default when none configured.\n */\nfunction extractConfiguredLevel(loggingConfig) {\n  if (loggingConfig && loggingConfig.level) {\n    var configuredLevel = loggingConfig.level;\n    var value = levels[configuredLevel];\n    if (!value && value !== 0) {\n      throw (0, error_1.newError)(\"Illegal logging level: \" + configuredLevel + \". Supported levels are: \" + Object.keys(levels));\n    }\n    return configuredLevel;\n  }\n  return DEFAULT_LEVEL;\n}\n/**\n * Extract the configured logger function from the driver's logging configuration.\n * @param {Object} loggingConfig the logging configuration.\n * @return {function(level: string, message: string)} the configured logging function.\n */\nfunction extractConfiguredLogger(loggingConfig) {\n  if (loggingConfig && loggingConfig.logger) {\n    var configuredLogger = loggingConfig.logger;\n    if (configuredLogger && typeof configuredLogger === 'function') {\n      return configuredLogger;\n    }\n  }\n  throw (0, error_1.newError)(\"Illegal logger function: \" + loggingConfig.logger);\n}","map":null,"metadata":{},"sourceType":"script"}