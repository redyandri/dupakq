{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useDatabases = exports.useSchema = void 0;\nvar react_1 = require(\"react\");\nvar cypher_1 = require(\"./cypher\");\nfunction toPropertySchema(properties) {\n  var ordered = Object.entries(properties).sort(function (_a, _b) {\n    var a = _a[0];\n    var b = _b[0];\n    return a < b ? -1 : 1;\n  }).map(function (_a) {\n    var key = _a[0],\n      value = _a[1];\n    return [key, value];\n  });\n  return Object.fromEntries(ordered);\n}\nfunction toLabelSchema(label, input) {\n  return __assign(__assign({}, input), {\n    label: label,\n    relationships: Object.entries(input.relationships).map(function (_a) {\n      var key = _a[0],\n        value = _a[1];\n      return toRelationshipTypeSchema(key, value);\n    }).sort(function (a, b) {\n      return a.type < b.type ? -1 : 1;\n    }),\n    properties: toPropertySchema(input.properties),\n    count: input === null || input === void 0 ? void 0 : input.count.toNumber()\n  });\n}\nfunction toRelationshipTypeSchema(type, input) {\n  var _a;\n  return __assign(__assign({}, input), {\n    type: type,\n    count: (_a = input.count) === null || _a === void 0 ? void 0 : _a.toNumber(),\n    properties: toPropertySchema(input.properties)\n  });\n}\nfunction useSchema(specificDatabase) {\n  var _a = cypher_1.useReadCypher('call apoc.meta.schema', {}, specificDatabase),\n    loading = _a.loading,\n    error = _a.error,\n    first = _a.first,\n    database = _a.database;\n  var _b = react_1.useState([]),\n    labels = _b[0],\n    setLabels = _b[1];\n  var _c = react_1.useState([]),\n    types = _c[0],\n    setTypes = _c[1];\n  react_1.useEffect(function () {\n    if (first) {\n      setLabels(Object.entries(first.get('value')).filter(function (_a) {\n        var key = _a[0],\n          value = _a[1];\n        return value.type === 'node';\n      }).map(function (_a) {\n        var key = _a[0],\n          value = _a[1];\n        return toLabelSchema(key, value);\n      }).sort(function (a, b) {\n        return a.label < b.label ? -1 : 1;\n      }));\n      setTypes(Object.entries(first.get('value')).filter(function (_a) {\n        var key = _a[0],\n          value = _a[1];\n        return value.type === 'relationship';\n      }).map(function (_a) {\n        var key = _a[0],\n          value = _a[1];\n        return toRelationshipTypeSchema(key, value);\n      }).sort(function (a, b) {\n        return a.type < b.type ? -1 : 1;\n      }));\n    }\n  }, [first]);\n  return {\n    loading: loading,\n    error: error,\n    database: database,\n    labels: labels,\n    types: types\n  };\n}\nexports.useSchema = useSchema;\nfunction useDatabases() {\n  var _a = cypher_1.useReadCypher('SHOW DATABASES', {}, 'system'),\n    loading = _a.loading,\n    error = _a.error,\n    records = _a.records;\n  var databases = records === null || records === void 0 ? void 0 : records.map(function (row) {\n    return {\n      name: row.get('name'),\n      address: row.get('address'),\n      role: row.get('role'),\n      requestedStatus: row.get('requestedStatus'),\n      currentStatus: row.get('currentStatus'),\n      error: row.get('error'),\n      default: row.get('default')\n    };\n  });\n  return {\n    loading: loading,\n    error: error,\n    databases: databases\n  };\n}\nexports.useDatabases = useDatabases;","map":null,"metadata":{},"sourceType":"script"}