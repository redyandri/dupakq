{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMPTY_CONNECTION_HOLDER = exports.ReadOnlyConnectionHolder = exports.ConnectionHolder = void 0;\nvar error_1 = require(\"../error\");\nvar util_1 = require(\"./util\");\nvar constants_1 = require(\"./constants\");\nvar bookmark_1 = require(\"./bookmark\");\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n * @private\n */\nvar ConnectionHolder = /** @class */function () {\n  /**\n   * @constructor\n   * @param {object} params\n   * @property {string} params.mode - the access mode for new connection holder.\n   * @property {string} params.database - the target database name.\n   * @property {Bookmark} params.bookmark - the last bookmark\n   * @property {ConnectionProvider} params.connectionProvider - the connection provider to acquire connections from.\n   * @property {string?} params.impersonatedUser - the user which will be impersonated\n   * @property {function(databaseName:string)} params.onDatabaseNameResolved - callback called when the database name is resolved\n   */\n  function ConnectionHolder(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.mode,\n      mode = _c === void 0 ? constants_1.ACCESS_MODE_WRITE : _c,\n      _d = _b.database,\n      database = _d === void 0 ? '' : _d,\n      bookmark = _b.bookmark,\n      connectionProvider = _b.connectionProvider,\n      impersonatedUser = _b.impersonatedUser,\n      onDatabaseNameResolved = _b.onDatabaseNameResolved;\n    this._mode = mode;\n    this._database = database ? (0, util_1.assertString)(database, 'database') : '';\n    this._bookmark = bookmark || bookmark_1.Bookmark.empty();\n    this._connectionProvider = connectionProvider;\n    this._impersonatedUser = impersonatedUser;\n    this._referenceCount = 0;\n    this._connectionPromise = Promise.resolve();\n    this._onDatabaseNameResolved = onDatabaseNameResolved;\n  }\n  ConnectionHolder.prototype.mode = function () {\n    return this._mode;\n  };\n  ConnectionHolder.prototype.database = function () {\n    return this._database;\n  };\n  ConnectionHolder.prototype.setDatabase = function (database) {\n    this._database = database;\n  };\n  ConnectionHolder.prototype.bookmark = function () {\n    return this._bookmark;\n  };\n  ConnectionHolder.prototype.connectionProvider = function () {\n    return this._connectionProvider;\n  };\n  ConnectionHolder.prototype.referenceCount = function () {\n    return this._referenceCount;\n  };\n  ConnectionHolder.prototype.initializeConnection = function () {\n    if (this._referenceCount === 0 && this._connectionProvider) {\n      this._connectionPromise = this._connectionProvider.acquireConnection({\n        accessMode: this._mode,\n        database: this._database,\n        bookmarks: this._bookmark,\n        impersonatedUser: this._impersonatedUser,\n        onDatabaseNameResolved: this._onDatabaseNameResolved\n      });\n    } else {\n      this._referenceCount++;\n      return false;\n    }\n    this._referenceCount++;\n    return true;\n  };\n  ConnectionHolder.prototype.getConnection = function () {\n    return this._connectionPromise;\n  };\n  ConnectionHolder.prototype.releaseConnection = function () {\n    if (this._referenceCount === 0) {\n      return this._connectionPromise;\n    }\n    this._referenceCount--;\n    if (this._referenceCount === 0) {\n      return this._releaseConnection();\n    }\n    return this._connectionPromise;\n  };\n  ConnectionHolder.prototype.close = function () {\n    if (this._referenceCount === 0) {\n      return this._connectionPromise;\n    }\n    this._referenceCount = 0;\n    return this._releaseConnection();\n  };\n  /**\n   * Return the current pooled connection instance to the connection pool.\n   * We don't pool Session instances, to avoid users using the Session after they've called close.\n   * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n   * @return {Promise} - promise resolved then connection is returned to the pool.\n   * @private\n   */\n  ConnectionHolder.prototype._releaseConnection = function () {\n    this._connectionPromise = this._connectionPromise.then(function (connection) {\n      if (connection) {\n        if (connection.isOpen()) {\n          return connection.resetAndFlush().catch(ignoreError).then(function () {\n            return connection._release();\n          });\n        }\n        return connection._release();\n      } else {\n        return Promise.resolve();\n      }\n    }).catch(ignoreError);\n    return this._connectionPromise;\n  };\n  return ConnectionHolder;\n}();\nexports.ConnectionHolder = ConnectionHolder;\n/**\n * Provides a interaction with a ConnectionHolder without change it state by\n * releasing or initilizing\n */\nvar ReadOnlyConnectionHolder = /** @class */function (_super) {\n  __extends(ReadOnlyConnectionHolder, _super);\n  /**\n   * Contructor\n   * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests\n   */\n  function ReadOnlyConnectionHolder(connectionHolder) {\n    var _this = _super.call(this, {\n      mode: connectionHolder.mode(),\n      database: connectionHolder.database(),\n      bookmark: connectionHolder.bookmark(),\n      connectionProvider: connectionHolder.connectionProvider()\n    }) || this;\n    _this._connectionHolder = connectionHolder;\n    return _this;\n  }\n  /**\n   * Return the true if the connection is suppose to be initilized with the command.\n   *\n   * @return {boolean}\n   */\n  ReadOnlyConnectionHolder.prototype.initializeConnection = function () {\n    if (this._connectionHolder.referenceCount() === 0) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Get the current connection promise.\n   * @return {Promise<Connection>} promise resolved with the current connection.\n   */\n  ReadOnlyConnectionHolder.prototype.getConnection = function () {\n    return this._connectionHolder.getConnection();\n  };\n  /**\n   * Get the current connection promise, doesn't performs the release\n   * @return {Promise<Connection>} promise with the resolved current connection\n   */\n  ReadOnlyConnectionHolder.prototype.releaseConnection = function () {\n    return this._connectionHolder.getConnection().catch(function () {\n      return Promise.resolve();\n    });\n  };\n  /**\n   * Get the current connection promise, doesn't performs the connection close\n   * @return {Promise<Connection>} promise with the resolved current connection\n   */\n  ReadOnlyConnectionHolder.prototype.close = function () {\n    return this._connectionHolder.getConnection().catch(function () {\n      return Promise.resolve();\n    });\n  };\n  return ReadOnlyConnectionHolder;\n}(ConnectionHolder);\nexports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;\nexports.default = ReadOnlyConnectionHolder;\nvar EmptyConnectionHolder = /** @class */function (_super) {\n  __extends(EmptyConnectionHolder, _super);\n  function EmptyConnectionHolder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  EmptyConnectionHolder.prototype.mode = function () {\n    return undefined;\n  };\n  EmptyConnectionHolder.prototype.database = function () {\n    return undefined;\n  };\n  EmptyConnectionHolder.prototype.initializeConnection = function () {\n    // nothing to initialize\n    return true;\n  };\n  EmptyConnectionHolder.prototype.getConnection = function () {\n    return Promise.reject((0, error_1.newError)('This connection holder does not serve connections'));\n  };\n  EmptyConnectionHolder.prototype.releaseConnection = function () {\n    return Promise.resolve();\n  };\n  EmptyConnectionHolder.prototype.close = function () {\n    return Promise.resolve();\n  };\n  return EmptyConnectionHolder;\n}(ConnectionHolder);\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n * @private\n */\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;\n// eslint-disable-next-line handle-callback-err\nfunction ignoreError(error) {}","map":null,"metadata":{},"sourceType":"script"}