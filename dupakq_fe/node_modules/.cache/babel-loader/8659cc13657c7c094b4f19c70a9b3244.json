{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FailedObserver = exports.CompletedObserver = void 0;\nvar CompletedObserver = /** @class */function () {\n  function CompletedObserver() {}\n  CompletedObserver.prototype.subscribe = function (observer) {\n    apply(observer, observer.onKeys, []);\n    apply(observer, observer.onCompleted, {});\n  };\n  CompletedObserver.prototype.cancel = function () {\n    // do nothing\n  };\n  CompletedObserver.prototype.prepareToHandleSingleResponse = function () {\n    // do nothing\n  };\n  CompletedObserver.prototype.markCompleted = function () {\n    // do nothing\n  };\n  CompletedObserver.prototype.onError = function (error) {\n    // nothing to do, already finished\n    throw Error('CompletedObserver not supposed to call onError');\n  };\n  return CompletedObserver;\n}();\nexports.CompletedObserver = CompletedObserver;\nvar FailedObserver = /** @class */function () {\n  function FailedObserver(_a) {\n    var error = _a.error,\n      onError = _a.onError;\n    this._error = error;\n    this._beforeError = onError;\n    this._observers = [];\n    this.onError(error);\n  }\n  FailedObserver.prototype.subscribe = function (observer) {\n    apply(observer, observer.onError, this._error);\n    this._observers.push(observer);\n  };\n  FailedObserver.prototype.onError = function (error) {\n    var _this = this;\n    Promise.resolve(apply(this, this._beforeError, error)).then(function () {\n      return _this._observers.forEach(function (o) {\n        return apply(o, o.onError, error);\n      });\n    });\n  };\n  FailedObserver.prototype.cancel = function () {\n    // do nothing\n  };\n  FailedObserver.prototype.prepareToHandleSingleResponse = function () {\n    // do nothing\n  };\n  FailedObserver.prototype.markCompleted = function () {\n    // do nothing\n  };\n  return FailedObserver;\n}();\nexports.FailedObserver = FailedObserver;\nfunction apply(thisArg, func, param) {\n  if (func) {\n    func.bind(thisArg)(param);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}